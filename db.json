{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/java_exception.png","path":"images/java_exception.png","modified":0,"renderable":0},{"_id":"source/images/qr_code.jpg","path":"images/qr_code.jpg","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/MyBlog.md","hash":"026a400b54cdb5f3888c1c2cefe3fe69a76d81e5","modified":1688523963408},{"_id":"source/images/qr_code.jpg","hash":"ef2104b0076b1682ebc160df82da80ba8370efca","modified":1681708116023},{"_id":"source/images/java_exception.png","hash":"cd70b8004398c3dfd15762683a5fc452da85b5ef","modified":1681708139767},{"_id":"node_modules/hexo-theme-icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1680502190205},{"_id":"node_modules/hexo-theme-icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1680502190320},{"_id":"node_modules/hexo-theme-icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1680502190418},{"_id":"node_modules/hexo-theme-icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1680502190526},{"_id":"node_modules/hexo-theme-icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1680502190588},{"_id":"node_modules/hexo-theme-icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1680502188197},{"_id":"node_modules/hexo-theme-icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1680502189036},{"_id":"node_modules/hexo-theme-icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1680502189528},{"_id":"node_modules/hexo-theme-icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1680502189760},{"_id":"node_modules/hexo-theme-icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1680502190017},{"_id":"node_modules/hexo-theme-icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1680502191797},{"_id":"node_modules/hexo-theme-icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1680502190625},{"_id":"node_modules/hexo-theme-icarus/package.json","hash":"75db783b805785377db28d4cb844ee65bb7be613","modified":1680502191397},{"_id":"node_modules/hexo-theme-icarus/README.md","hash":"32f9f4fc8cd7ec60b30544bd2e558b593519ae5d","modified":1680502191806},{"_id":"node_modules/hexo-theme-icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":1680502190771},{"_id":"node_modules/hexo-theme-icarus/include/dependency.js","hash":"0ca35dec92ccf383f45db905db1a5a0e92d7209e","modified":1680502190827},{"_id":"node_modules/hexo-theme-icarus/include/register.js","hash":"ec6596b63bfb4349ba61792d905abe8e06fea625","modified":1680502190995},{"_id":"node_modules/hexo-theme-icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":1680502192190},{"_id":"node_modules/hexo-theme-icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":1680502192193},{"_id":"node_modules/hexo-theme-icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":1680502192196},{"_id":"node_modules/hexo-theme-icarus/languages/fr.yml","hash":"06d5c819d6108a42b28cff7b52e5410d0bed55d1","modified":1680502192220},{"_id":"node_modules/hexo-theme-icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":1680502192226},{"_id":"node_modules/hexo-theme-icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":1680502192229},{"_id":"node_modules/hexo-theme-icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":1680502192233},{"_id":"node_modules/hexo-theme-icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":1680502192236},{"_id":"node_modules/hexo-theme-icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":1680502192240},{"_id":"node_modules/hexo-theme-icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":1680502192257},{"_id":"node_modules/hexo-theme-icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":1680502192247},{"_id":"node_modules/hexo-theme-icarus/languages/tr.yml","hash":"dd0a7bfe14848d6e1aa229198fe1db03e08e305e","modified":1680502192260},{"_id":"node_modules/hexo-theme-icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":1680502192267},{"_id":"node_modules/hexo-theme-icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":1680502192263},{"_id":"node_modules/hexo-theme-icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":1680502192275},{"_id":"node_modules/hexo-theme-icarus/layout/archive.jsx","hash":"99bf235042d0c57af15d2f108ba5eda77443fea8","modified":1680502191553},{"_id":"node_modules/hexo-theme-icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1680502191610},{"_id":"node_modules/hexo-theme-icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1680502191597},{"_id":"node_modules/hexo-theme-icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1680502191670},{"_id":"node_modules/hexo-theme-icarus/layout/layout.jsx","hash":"ac7c4e3465a116c7f05f8c2e09ee6d6b9467abf1","modified":1680502191676},{"_id":"node_modules/hexo-theme-icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1680502191711},{"_id":"node_modules/hexo-theme-icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1680502191702},{"_id":"node_modules/hexo-theme-icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1680502191769},{"_id":"node_modules/hexo-theme-icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":1680502190893},{"_id":"node_modules/hexo-theme-icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1680502191773},{"_id":"node_modules/hexo-theme-icarus/include/migration/head.js","hash":"7189efe33d18927d3790e8afb06642fb293b8603","modified":1680502190872},{"_id":"node_modules/hexo-theme-icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":1680502191014},{"_id":"node_modules/hexo-theme-icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1680502191043},{"_id":"node_modules/hexo-theme-icarus/include/migration/v5_v5.1.js","hash":"073f22bd16e34b56f016633b1676dab2e7d8843d","modified":1680502191100},{"_id":"node_modules/hexo-theme-icarus/include/migration/v4_v5.js","hash":"6342310892d113763b5544789b45d44c0ccf2854","modified":1680502191080},{"_id":"node_modules/hexo-theme-icarus/include/schema/config.json","hash":"f233678cd656c0e300181ca79dd30cb42fc213b3","modified":1680502191326},{"_id":"node_modules/hexo-theme-icarus/include/style/article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":1680502191913},{"_id":"node_modules/hexo-theme-icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1680502191928},{"_id":"node_modules/hexo-theme-icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1680502191932},{"_id":"node_modules/hexo-theme-icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1680502191936},{"_id":"node_modules/hexo-theme-icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1680502191998},{"_id":"node_modules/hexo-theme-icarus/include/style/codeblock.styl","hash":"ec54dc24eb4d9802d8fefc44c210558bc1641109","modified":1680502191962},{"_id":"node_modules/hexo-theme-icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1680502192003},{"_id":"node_modules/hexo-theme-icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1680502192022},{"_id":"node_modules/hexo-theme-icarus/include/style/navbar.styl","hash":"34f09b144cb46a25ec2cc7260a6c207dd34ff1fe","modified":1680502192031},{"_id":"node_modules/hexo-theme-icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1680502192036},{"_id":"node_modules/hexo-theme-icarus/include/style/plugin.styl","hash":"084843d5a522029e0f84a4fe791fbcb2cabd4c36","modified":1680502192041},{"_id":"node_modules/hexo-theme-icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1680502192044},{"_id":"node_modules/hexo-theme-icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1680502192057},{"_id":"node_modules/hexo-theme-icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1680502190817},{"_id":"node_modules/hexo-theme-icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1680502192086},{"_id":"node_modules/hexo-theme-icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1680502192091},{"_id":"node_modules/hexo-theme-icarus/layout/common/article.jsx","hash":"1d06eee32ea1fcb3162227eb1d7d19be39b6f5e3","modified":1680502191578},{"_id":"node_modules/hexo-theme-icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":1680502191627},{"_id":"node_modules/hexo-theme-icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":1680502191637},{"_id":"node_modules/hexo-theme-icarus/layout/common/footer.jsx","hash":"de966666f1e4ef80e0d15081b2709c3065b246dd","modified":1680502191641},{"_id":"node_modules/hexo-theme-icarus/layout/common/head.jsx","hash":"2ec1f511f32e3a9c86d49f1338f57ae5ece18898","modified":1680502191659},{"_id":"node_modules/hexo-theme-icarus/layout/common/navbar.jsx","hash":"d96e501e52861056474659f96ee0206588d8c93a","modified":1680502191699},{"_id":"node_modules/hexo-theme-icarus/layout/common/scripts.jsx","hash":"4816c9099a881b5f7b13af3e42caae36edbffccd","modified":1680502191748},{"_id":"node_modules/hexo-theme-icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":1680502191708},{"_id":"node_modules/hexo-theme-icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":1680502191761},{"_id":"node_modules/hexo-theme-icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":1680502191765},{"_id":"node_modules/hexo-theme-icarus/layout/common/widgets.jsx","hash":"251263b97de12f2b8d1fce2514e83430f2515b94","modified":1680502191786},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":1680502191590},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1680502191508},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1680502191984},{"_id":"node_modules/hexo-theme-icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":1680502191733},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1680502191841},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1680502191994},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1680502192064},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1680502192152},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1680502192163},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1680502191898},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1680502192169},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1680502192174},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":1680502190676},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1680502190689},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1680502190706},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/article.json","hash":"e2502c39045c6a26ccd8e880858f93e78c7bda35","modified":1680502191231},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","hash":"08a2641765eeaf712157ad134dd675e3f7708ae2","modified":1680502190938},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/comment.json","hash":"f49270b619f5d2c3decde6b0b5a0c3bbab4b54a5","modified":1680502191283},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1680502191358},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/footer.json","hash":"e85c9d7f2579805beb252a1b6345d5a668a13baa","modified":1680502191365},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1680502191375},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1680502191384},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":1680502191411},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1680502191437},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1680502191444},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1680502191455},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1680502191463},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":1680502191474},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1680502191155},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1680502191275},{"_id":"node_modules/hexo-theme-icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1680502191430},{"_id":"public/content.json","hash":"6af9eb74076c332110760e47ad152bf1bf917efd","modified":1688523967947},{"_id":"public/search.xml","hash":"a571a8fb409674f794d97a76537222767c5dede4","modified":1688523967947},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1688523474964},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1688523474964},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1688523474964},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1688523474964},{"_id":"public/manifest.json","hash":"651a74ef202f5e5166fe2ab65aba3ec1a3736e7a","modified":1688523474964},{"_id":"public/categories/index.html","hash":"473834e38eb1ecdef0e240eff4bb04177101b69f","modified":1688524349103},{"_id":"public/tags/index.html","hash":"0c8416fcb1e0cbb40bb064b2b41a076b71d1f3da","modified":1688524349103},{"_id":"public/images/qr_code.jpg","hash":"ef2104b0076b1682ebc160df82da80ba8370efca","modified":1688523474964},{"_id":"public/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1688523474964},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1688523474964},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1688523474964},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1688523474964},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1688523474964},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1688523474964},{"_id":"public/js/animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":1688523474964},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1688523474964},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1688523474964},{"_id":"public/js/main.js","hash":"08a2641765eeaf712157ad134dd675e3f7708ae2","modified":1688523474964},{"_id":"public/css/default.css","hash":"8717dd0ed1fe2a4237fbfb4f4f6e566cb1ee16b7","modified":1688523474964},{"_id":"public/css/cyberpunk.css","hash":"b462177bee11f76e84e649f8192d5a68cb4b1402","modified":1688523474964},{"_id":"public/css/style.css","hash":"8717dd0ed1fe2a4237fbfb4f4f6e566cb1ee16b7","modified":1688523474964},{"_id":"public/images/java_exception.png","hash":"cd70b8004398c3dfd15762683a5fc452da85b5ef","modified":1688523474964},{"_id":"public/atom.xml","hash":"3368e2082bb3c39d077b94ed3ae298b5e63c774d","modified":1688523967947},{"_id":"public/sitemap.xml","hash":"a714ee403c2033c3e4e29ce012faf2faed62f367","modified":1688523967947},{"_id":"public/sitemap.txt","hash":"0365576410b456320c1c439ea738f5cd10ad6135","modified":1688523967947},{"_id":"public/archives/index.html","hash":"e4630a3b684494ef3b547121414169036c95c37e","modified":1688524349103},{"_id":"public/archives/2023/index.html","hash":"45256a765031492a669c6fbf9c75c9b529ff0a92","modified":1688524349103},{"_id":"public/archives/2023/04/index.html","hash":"2a07eb6ff8b6dafbc0d7d3c4b47e6e8b6744aac5","modified":1688523474964},{"_id":"public/index.html","hash":"b57d23da2adfd4e3acf6355904689538938c1c68","modified":1688524349103},{"_id":"public/2023/04/03/MyBlog/index.html","hash":"72cc50400ba41a879c13199810c489007963d66c","modified":1688523474964},{"_id":"public/archives/2023/03/index.html","hash":"bdb6ff797e8e405bf796cbac431fd17e5ca16d32","modified":1688524349103},{"_id":"public/2023/03/16/MyBlog/index.html","hash":"58f3e5bb8be1233a3cdfb92606f43fc6037d1e9e","modified":1688524349103},{"_id":"public/tags/后端/index.html","hash":"c07b25ac40e6b8e6548d01a2bf13cf64abaab2a2","modified":1688524349103},{"_id":"public/tags/面试题/index.html","hash":"9e15985928925cec5d7ef6da6f17638b56f1d8de","modified":1688524349103},{"_id":"public/categories/后端/index.html","hash":"c7b5590bd380eda4f410effa07d2317e884b5add","modified":1688524349103}],"Category":[{"name":"后端","_id":"cljp3kktn000084wd2d2te5ou"}],"Data":[],"Page":[],"Post":[{"title":"测试测试吃","date":"2023-03-16T06:48:17.000Z","toc":true,"_content":"#### 可以扫描下面二维码访问我的小程序来打开，随时随地通过微信访问。 \n \n##### 这个是一些Java基础知识常见面试题，以及答案，我会逐个写出答案，实际上也是我学习的过程，一步一步来吧。 \n \n#### 1. java中==和equals和hashCode的区别 \n（1）==如果作用于基本数据类型的变量（byte,short,char,int,long,float,double,boolean ），则直接比较其存储的\"值\"是否相等；如果作用于引用类型的变量（String），则比较的是所指向的对象的地址（即是否指向同一个对象）。\n（2）equal如果直接使用Object继承的方法则和==相同，但是如果equal重写的比较方法，自定义后就按照equal后的定义比较了 \n（3）hashCode是将bean实体转换为哈希编码的方法 \n \n#### 2. int与integer的区别 \n \n int 是java的基本类型，非null，初始值0，Integer是int的封装类型，可为null，以及一些方法，max，min等 \n\n<!-- more -->\n\n#### 3. 抽象类的意义\n\n无法实例化，没有足够的信息来描述一个对象，实际是对某类对象的抽象出来的一些共有的定义以及方法。为公共的对象的非抽象方法提供了通用的定义，方便子类的使用。也可以定义抽象方法，不能有方法体，这种方法子类必须重写（这个实际和接口是一样的，如果子类也是抽象类可以不重写）\n \n#### 4. 接口和抽象类的区别\n一个类可以实现多个接口，但是一个类只能有一个抽象类的父类，接口所有方法都是抽象方法，必须由实现类实现这些抽象方法，而抽象类可以有非抽象方法，抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 public static final 类型的， 接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。\n \n#### 5. 能否创建一个包含可变对象的不可变对象?\n```    \npublic class TestNotChanged {\n    public static final TestDto testDto = new TestDto();\n    public static void main(String[] args) {\n        testDto.setCommParam(CommParam.builder().paramValue(\"1111\").build());\n        System.out.println(testDto.getCommParam());\n        testDto.setCommParam(CommParam.builder().paramValue(\"2222\").build());\n        System.out.println(testDto.getCommParam());\n    }\n}\n//输出\nCommParam{paramKey='null', paramValue='1111'}\nCommParam{paramKey='null', paramValue='2222'}\n\n```\n#### 6. 谈谈对java多态的理解\n继承父类，重写父类的方法，Parent parent = new Child();这时在执行父类与子类都有的方法，实际会调用子类的方法。\n#### 7. String、StringBuffer、StringBuilder区别\nString 字符串常量、StringBuffer 字符串变量（线程安全，所有方法都是synchronized）、StringBuilder 字符串变量（非线程安全，效率高，没有synchronized）\n#### 8. 泛型中extends和super的区别\nextends表示泛型的上限（表示必须是该类型或者该类型的子类），super表示泛型的下限（表示必须是该类型或者该类型的父类）\n#### 9. 进程和线程的区别\n进程cpu执行任务的一段任务，而线程是这个任务在cpu上执行的具体操作。\n#### 10. 序列化的方式\n1>对象实现了序列化接口Serializable\n2>实现接口Externalizable,实现writeExternal和readExternal方法\n#### 11. string 转换成 integer的方式及原理\n第一位可以是符号位（正负），正负值会在最后一步取正反。从左到右按位取值，例如325，第一位为3，则循环取，取出3，将3变为-3放到result中（个人认为这个是避免从正数超过int的最大值溢出），再取第二位2，这时需要先将result*进制（一般为10进制），变为-30，之后-30减去2得到result为-32，再取第三位5，先将result*进制，result变为-320，之后-320减去5得到-325，循环完毕，这个值是正数，所以需要取反，得到325.\n#### 12. 静态属性和静态方法是否可以被继承？是否可以被重写？以及原因？\n可以被子类继承使用，但是重写后不生效，因为static方法以及属性都是全局的，需要通过具体class名称来使用，即使方法名或者属性名相同，父类的静态方法只能是父类后边带方法，子类的静态方法只能是子类后边带方法。\n```\npublic class Parent {\n    public static String aaa = \"aaa\";\n    public static String testMethod() {\n        return aaa;\n    }\n}\npublic class Child extends Parent {\n    public static String aaa = \"aaaa\";\n    public static String testMethod() {\n        return aaa;\n    }\n    public static void main(String[] args) {\n        Parent a = new Child();\n        System.out.println(a.aaa);\n        Child b = new Child();\n        System.out.println(b.aaa);\n        System.out.println(Parent.testMethod());\n        System.out.println(Child.testMethod());\n    }\n}\n//输出\naaa\naaaa\naaa\naaaa\n```\n#### 13. 成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及项目中的应用\n成员内部类:定义在类内部的非静态类;\n静态内部类:定义在类内部的静态类;\n局部内部类:定义在方法中的类（只在某个方法中使用）;\n匿名内部类:没有访问修饰符的直接通过new出来的内部类（例如事件监听的回调方法）\n```\n//匿名内部类\npublic void test() {\n        Object obj = new Object() {\n            @Override\n            public String toString() {\n                System.out.println(b);\n                return String.valueOf(a);\n            }\n        };\n        System.out.println(obj.toString());\n    }\n\n```\n#### 14. 讲一下常见编码方式？\nASCII，ISO-8859-1、GBK/GB2312/UTF-16(双字节)/UTF-8（变长，开头是0表示ASCII，开始是11表示首字节，开始时10表示非首字节，前一个才是首字节）\n如何格式化日期?\n```\nDate FormatDate = new SimpleDateFormat(\"YYYY-MM-DD\").parse(\"2020-01-01\")\nLocalDateTime.now(ZoneId.of(\"Asia/Shanghai\")).format(DateTimeFormatter.ofPattern(\"YYYY-MM-DD\"))\n```\n\n#### 15. Java的异常体系\n\n\n\n#### 16. 什么是异常链\n不会覆盖原有的异常信息，将之前throw出来的异常加入到新的异常中\n```\n// 异常链写法1\nException e2 = new Exception(\"第2个异常\");\ne2.initCause(e); // 异常链信息的传递\nthrow e2;\n// 异常链写法2\n// throw new Exception(\"第2个异常\", e);\n```\n\n#### 17. throw和throws的区别\nthrow表示创建新的异常并扔出来，而throws表示方法定义的末尾，将内部可能throw出来的异常直接在方法级抛出\n\n#### 18. 反射的原理，反射创建类实例的三种方式是什么。\n```\n//第一种，使用 Class.forName 静态方法。当你知道该类的全路径名时，你可以使用该方法获取 Class 类对象。\nClass clz = Class.forName(\"com.aaa.Apple\");\nApple apple = (Apple)clz.newInstance();\n\n// 第二种，使用 .class 方法。\n//这种方法只适合在编译前就知道操作的 Class。\nClass clz = Apple.class;\nConstructor constructor = clz.getConstructor();\nApple apple = (Apple)constructor.newInstance();\n//第三种，使用类对象的 getClass() 方法。\nString str = new String(\"Hello\");\nClass clz = str.getClass();\n```\n\n#### 19. java当中的四种引用\n强引用：直接通过=赋值，内存不够也不会被回收，常见用法；\n软引用：SoftReference<?>来表示，内存不足时会回收软引用，写完下面代码才理解，实际上这个是定义了一个引用，指向了里面的地址，实际上即使里面的变量设定为null了，引用还在，但是当内存不足时候回收掉，软引用就无法get到值了，变为null了，另外注意一定是new String出来，而不是直接写=\"123\",这样写多少都是一个地址，无法回收，但是实际上这个没有回收成功，软引用的场景是缓存，图片缓存等；\n弱引用：WeakReference<?>来表示，和软引用的写法类似，但是只要内存回收，弱引用就会被回收，下面的回收成功了，WeakHashMap，可以被回收的key值（HashMap的key值在删除前在不能被回收），而这种WeakHashMap的key在内存不足时可以被回收，使用前需要判断是否存在；\n虚引用（PhantomReference） ，只能通过 ReferenceQueue 引用队列一起使用，创建时放入queue中，使用时通过queue的poll取出来，但是随时可能会被回收。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。实际这个就是看何时发生回收的一个监控，目前没有其他的使用场景。\n```\n//弱引用\n    public static void main(String[] args) throws Exception {\n        String a = new String(\"1111\");\n        WeakReference<String> list =new WeakReference(a);\n        a = null;\n        while(true) {\n            System.out.println(list.get());\n            System.out.println(\"-----\");\n            System.gc();\n            System.out.println(list.get());\n            System.out.println(\"==========================================================================\");\n            if(list.get() == null){\n                System.out.println(\"BREAKBREAKBREAKBREAK\");\n                break;\n            }\n        }\n    }\n//输出\n[GC (Allocation Failure)  1023K->708K(5632K), 0.0011759 secs]\n[GC (Allocation Failure)  1732K->1034K(5632K), 0.0010715 secs]\n[GC (Allocation Failure)  2056K->1224K(5632K), 0.0008859 secs]\n[GC (Allocation Failure)  2247K->1460K(5632K), 0.0009643 secs]\n[GC (Allocation Failure)  2484K->1577K(5632K), 0.0009887 secs]\n[GC (Allocation Failure)  2586K->1703K(5632K), 0.0015657 secs]\n[GC (Allocation Failure)  2727K->1855K(5632K), 0.0017342 secs]\n[GC (Allocation Failure)  2879K->2183K(5632K), 0.0010898 secs]\n1111\n-----\n[GC (System.gc())  2990K->2264K(5632K), 0.0009776 secs]\n[Full GC (System.gc())  2264K->1588K(5632K), 0.0179253 secs]\nnull\n==========================================================================\nBREAKBREAKBREAKBREAK\n//虚引用\n        String status = new String(\"123\");\n        ReferenceQueue<String> queue = new ReferenceQueue<>();\n        PhantomReference<String> test = new PhantomReference<String>(status, queue);\n        status = null;\n        System.out.println(queue.poll());\n        System.gc();\n        Thread.sleep(2000L);\n        System.out.println(queue.poll());\n//输出\nnull\njava.lang.ref.PhantomReference@58372a00\n\n```\n#### 20. 深拷贝和浅拷贝的区别是什么?\n这里考点是对基本类型和引用类型的理解，基本类型浅拷贝和深拷贝没什么区别，都是copy出一份到新的内存地址，但是引用类型就不一样了，如果是浅拷贝，一些引用变量还是指向之前的地址，这就导致了修改了拷贝前的Bean的某个值，则另外一个Bean的该变量也会变化，因为内存地址是一样的，因此需要重写clone方法，将该变量copy一份到新内存地址，这样修改任何一个都不互相影响。\n#### 21. 什么是编译器常量？使用它有什么风险？\n这里考点是对编译器（期）常量和运行时常量的理解\n```\n    //编译期常量\n    public static final String TEST = \"TEST\";\n    //运行时常量\n    public static final double TEST_DOUBLE = Math.random();\n```\n编译期常量实际上是在编译的时候初始化的变量，而运行时常量只有在运行时候才会初始化，编译时不知道是什么值。\n在咱们大型项目中，会有增量打升级包的情况，此时如果A类引用了其B类的一个编译期常量（A类本次没有编译，B类的常量值修改后编译），那么上线后，会发现A类引用的编译期常量还是之前的值，会导致bug的产生，因此一定要注意一起编译。这个其实引入了JVM的知识点，A类引用了B累的编译期常量，实际会在编译时写死在A类中，也就是即使B类编译变化了也不影响A类的引用。\n\n#### 22. 你对String对象的intern()熟悉么?\n\nintern实际上是在常量池里寻找与其相等的String，并把地址返回过来，具体可以看下面的，s1和s4通过+实际上是不同的String，但是由于字符串实际相同，因此intern()也是相同的。\n```\n        String s1 = \"abc\";\n        String s2 = \"a\";\n        String s3 = \"bc\";\n        String s4 = s2 + s3;\n        System.out.println(s1 == s4);\n        System.out.println(s1.intern() == s4.intern());\n```\n#### 23. a=a+b与a+=b有什么区别吗?\n\n其实你注意下，他把类型去掉了？为什么呢？\n这就是问题所在，隐去类型就是题目关心的，因为实际上如果类型一致，那么就不会有问题这两个操作是一致的，但是如果类型不一致，那么+=就会多出来一步类型转换。\n```\n\tbyte a=1;\n\t//a+=4;这个和下面实际上是相等的操作\n    a = (byte)(a+4);\n    //但是如果这么写编译期会报错，认为a+4转换为了int，但是实际上a是byte，两个类型不符合了\n    a = a+4;\n```\n#### 24. 静态代理和动态代理的区别，什么场景使用？\n这个有点长，我写了个帖子：\nhttps://segmentfault.com/a/1190000040962971\n#### 25. 如何将一个Java对象序列化到文件里？\n可以查看我的另一个帖子：\nhttps://segmentfault.com/a/1190000040941021\n#### 26. 说说你对Java反射的理解\n可以查看我的另一个帖子：\nhttps://segmentfault.com/a/1190000040913240\n#### 27. 说说你对Java注解的理解\n可以查看我的另一个帖子：\nhttps://segmentfault.com/a/1190000040957885\n#### 28. 说说你对依赖注入的理解\n在没有Spring或者在纯java的代码中，都是自己去new出来的对象，这样会导致很多代码中包含了大量的new，set各种代码\n例如如果我需要数据库操作先创建Connection连接等一系列操作，很繁琐\n出现了Spring以后，Spring容器把这些操作集合了，也就是咱们BeanA需要BeanB的时候，不需要再去new操作了，Spring容器帮助咱们把BeanB创建好了\nBeanA想要使用BeanB直接拿来就可以用了(Spring容器帮助把BeanB注入到BeanA中了，BeanA依赖的BeanB就这样被注入进来了)，这种操作就是依赖注入了。\n其实很多人还说有Ioc控制反转，个人理解就是以前需要BeanB就new出来就好了，现在容器把创建BeanB的过程拿走了，创建BeanB的过程被容器控制了。\nDI依赖注入，实际就是BeanA依赖的BeanB被容器帮助下，容器把BeanB注入到了BeanA中。\n#### 29. 说一下泛型原理，并举例说明\n实际上java的泛型是个伪泛型，使用起来很方便，免去手写转型操作了。\n具体原理时编译器在编译前会检测你针对List<String>这种定义的集合中存入内容时候，会去检测你传入的类型是否符合类型，如果不符合就给你提示类型传入的不对。\n另外看源码：\n```\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add(\"Sfsdf\");\n        String result = list.get(0);\n        System.out.println(result);\n    }\n```\n反编译后源码的，发现了什么，list取出来之后增加一个String转型，这个就是伪泛型了，实际上泛型编译成class时候，会帮助咱们进行转型操作，而不像C中的泛型，独立的类型，不需要转型操作：\n```\n  public static void main(String[] args)\n  {\n    List<String> list = new ArrayList();\n    list.add(\"Sfsdf\");\n    String result = (String)list.get(0);\n    System.out.println(result);\n  }\n```\n更多的可以查看我的另一个帖子：\nhttps://segmentfault.com/a/1190000040835933\n\n#### 30. Java中String的了解\nString类其实是通过char数组来保存字符串的\nString类是final类，也即意味着String类不能被继承，并且它的成员方法都默认为final方法\nString对象一旦被创建就是固定不变的了，对String对象的任何改变都不影响到原对象，相关的任何change操作都会生成新的对象\n有两种创建方式直接通过\"\"（这种方式直接使用常量池的常量）创建以及new String(\"\")（这种方式，会将对象存储到堆中）的方式\nString str3=str1+str2这个操作实际触发了StringBuilder的append方法以及toString方法。\n但是String str4=\"abc\"+\"def\";这种情况下，abc和def都在常量池内，因此拼接时候直接在常量池内拼接，生成的abcdef还在常量池中\nString.intern()会直接从常量池里找到\nString是不可变字符串对象，StringBuilder和StringBuffer是可变字符串对象（其内部的字符数组长度可变）\nString中的对象是不可变的，也就可以理解为常量，显然线程安全。StringBuffer 与 StringBuilder中的方法和功能完全是等价的，只是StringBuffer 中的方法大都采用了synchronized关键字进行修饰，因此是线程安全的，而StringBuilder没有这个修饰，可以被认为是非线程安全的。\n\n#### 31. String为什么要设计成不可变的？\n如果设计成StringBuilder这种，作为key放在HashSet中，StringBuilder是可变的，如果分别放入了两个不同值的StringBuilder sb1和sb2，放入了后期修改了sb2的值和sb1的值相同，就会违反了HashSet的key值唯一性，另外在大量使用字符串，很多重复的字符串情况下，也是节省了很多存储空间，关键是它不可变所以也不会出现问题。\n#### 32. Object类的equal和hashCode方法重写，为什么？\n首先equal直接使用Object的话，是和==表示了相同的意思，因此如果有一些复杂的Bean需要特殊的比较时候，就需要重启equal了。比如修改了eqaul方法，某些情况下表示相同了，如果不重写hashCode时候，再存入HashSet或者HashMap的做为key的时候，可能不相同，这样就会表达出不同的意思。\n另外java还有个规定：hashcode()不等，一定能推出equals()也不等；hashcode()相等，equals()可能相等，也可能不等。\n#### 33. Java中实现多态的机制是什么？\nJava实现多态有三个必要条件：继承、重写、向上转型。\n继承：在多态中必须存在有继承关系的子类和父类。\n重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。\n向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。\n只有满足了上述三个条件，我们才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象，从而达到执行不同的行为。\n重载(overload)和重写(override)\n如果一个子类继承了一个父类，子类中拥有和父类相同方法名称，返回值，参数类型的话，就是重写，会执行子类中的方法。\n如果一个类中定义了多个同名方法，他们有不同的参数类型或者参数数量或者返回值类型，那就叫重载\n=========以下内容2022.08.14新增==========\n#### 34. 面向对象编程的特征有哪些？\n（1）封装 (Encapsulation)，是指隐藏对象的属性和具体如何实现操作，控制成员属性的访问以及修改权限，只能通过专用的public方法来访问获取。具体如下。\n```\nprivate String test = \"测试封装\";\npublic String getTest(){\nreturn this.name;\n}\n```\n（2）继承 (Inheritance)，就是指子类继承父类，使得库子类也能具有父类相同的行为。\n（3）多态 (Polymorphism)是指同一个行为具有多个不同的表现形式或形态，如一个类的方法在不同的参数情况有不同表现形式。\n\n#### 35. i++和++i的区别\n（1）i++是先使用当前i值使用，再对i进行自身+1操作。\n（2）++i则相反，现对自身+1操作，再使用+1后的结果操作。\n\n#### 36. JDK和JRE的区别\n（1）JRE，Java Runtime Environment（java运行时环境）。即java程序的运行时环境，包含了java虚拟机，java基础类库。\n（2）JDK，Java Development Kit（java开发工具包）。即java语言编写的程序所需的开发工具包。\n（3）JDK包含了JRE，同时还包括java源码的编译器javac、监控工具jconsole、分析工具jvisualvm等。\n\n#### 37. JAVA的关键字有哪些？\n（1）48个关键字：abstract、assert、boolean、break、byte、case、catch、char、class、continue、default、do、double、else、enum、extends、final、finally、float、for、if、implements、import、int、interface、instanceof、long、native、new、package、private、protected、public、return、short、static、strictfp、super、switch、synchronized、this、throw、throws、transient、try、void、volatile、while。\n（2）2个保留字（现在没用以后可能用到作为关键字）：goto、const。\n（3）3个特殊直接变量：true、false、null。\n\n#### 38. java中常量是什么？\n常量就是不变的数据量, 在程序执行的过程中其值不可以发生改变。\n如下所示就是常量的一种\n```\nprivate final static String NAME = \"AAAABBBB\";\n```\n\n#### 39. java中常量有哪些类型？\n（1）整数常量\n整型常量是整数类型的数据，有二进制、八进制、十进制和十六进制4种表示形式具体表示形式如下。\n十进制表示方式：正常数字。 如 13、25等\n二进制表示方式：以 0b(0B) 开头。 如0b1011 、0B1001\n十六进制表示方式：以 0x(0X) 开头。 数字以0-9及A-F组成 如0x23A2、0xa、0x10\n八进制表示方式：以 0 开头。 如01、07、0721\n（2）浮点数常量，浮点数常量就是在数学中用到的小数，也叫小数类型，分为foat单精度浮点数和double双精度浮点数两种类型。如1.0、-3.15、3.168等\n（3）字符常量，字符常量用于表示一个字符，一个字符常量要用一对英文半角格式的单引’’号引起来，它可以是英文字母、数字、标点符号以及由转义序列来表示的特殊字符。如 'a'，'A', '0', '家'。\n（4）字符串常量，字符串常量用于表示一串连续的字符，一个字符串常量要用一对英文半角格式的双引号””引起来，如 \"我爱Java\"，\"0123\"，\"\"，\"null\"。\n（5）布尔型常量值，Java 的布尔型常量只有两个值，即 false（假）和 true（真）。\n（6）null常量，null常量只有一个值null，表示对象的引用为空。\n\n#### 40. public、private、protected以及默认的区别\n（1）public，表示紧跟其后的成员可以被任何人引用\n（2）private，表示紧跟其后的成员除了类型创建者和类型内部的方法，任何人都不可引用，否者程序编译报错\n（3）protected，与private效果相当，差别仅在于继承的类可以访问protected成员\n（4）默认访问权限（即定义属性时不加任何关键字修饰），默认访问权限通常被称为“包访问权限”，在这种权限下的成员变量可被同一个包中的其他类访问\n```\npackage com.buxuesong;\n\npublic class TestBean {\n    public int publicParam;\n    String defaultParam;\n    protected String protectedParam;\n    private String privateParam;\n}\n\npackage com.buxuesong;\n\npublic class ChildTestBean extends TestBean {\n    public void setBean() {\n        TestBean testBean = new TestBean();\n        //public修饰成员可被任何人访问\n        testBean.publicParam = 12;\n        //同一个包中的类可访问默认权限成员\n        testBean.defaultParam = \"Bob\";\n        //继承的类可访问protected成员\n        testBean.protectedParam = \"UK\";\n        //ERROR 继承的类无法访问private成员\n        testBean.privateParam = \"man\";\n    }\n}\n\npackage com.buxuesong.test;\n\nimport com.buxuesong.TestBean;\n\npublic class DifferentPackageBean {\n    public void setBean() {\n        TestBean testBean = new TestBean();\n        //public修饰成员可被任何人访问\n        testBean.publicParam = 12;\n        //ERROR 包访问权限成员无法被其他包中的类访问\n        testBean.defaultParam = \"Bob\";\n        //ERROR protected成员无法被其他包中的类访问\n        testBean.protectedParam = \"UK\";\n        //ERROR private成员只能被类型创建者及类型内部方法访问\n        testBean.privateParam = \"man\";\n    }\n}\n```\n\n#### 41. this和super有什么区别？\n（1）this是自身的一个对象，代表对象本身，指向对象本身的一个指针。\n（2）super可以理解为是指向自己超（父）类对象的一个指针，而这个超类指的是离自己最近的一个父类。\n（3）属性的区别，this访问本类中的属性，如果本类没有此属性则从父类中继续查找。super访问父类中的属性。\n（4）方法的区别，this访问本类中的方法，如果本类没有此方法则从父类中继续查找。super访问父类中的方法。\n（5）构造的区别，this调用本类构造，必须放在构造方法的首行。super调用父类构造，必须放在子类构造方法首行。\n\n#### 42. &和&&的区别是什么？\n（1）java 中 && 和 & 都是表示与的逻辑运算符，都表示逻辑运输符 and，当两边的表达式都为 true 的时候，整个运算结果才为 true，否则为 false。\n（2）& 叫做按位与，& 直接操作整数基本类型，而 && 不行。按位与运算符 “&” 是双目运算符。其功能是参与运算的两数各对应的二进位相与。只有对应的两个二进位都为 1 时，结果位才为 1。参与运算的两个数均以补码出现。例如， 0x31 & 0x0f 的结果为 0x01\n（3）&& 叫做短路与，&& 有短路效应，即：当第一个布尔运算为 false，第二个布尔运算不执行。而 & 运算符没有。例如，对于 if (str != null && !str.equals (“”)) 表达式，当 str 为 null 时，后面的表达式不会执行，所以不会出现 NullPointerException。如果将 && 改为 &，则会抛出 NullPointerException 异常。 If (x==33 & ++y>0) y 会增长， If (x==33 && ++y>0) 不会增长\n\n#### 43. ||和|的区别是什么？\n（1）||和|都是表示“或”，区别是||只要满足第一个条件，后面的条件就不再判断（实际也不执行），而|要对所有的条件进行判断。\n（2）“||”: 如果左边计算后的操作数为true,右边则不再执行，返回true；\n（3）“|”：前后两个操作数都会进行计算。也就是说：“|”不存在短路。\n\n#### 44. while和do while有什么区别？\n（1）while，在while中的条件只要满足为true，则一直进行循环。\n（2）do while，无论如何一定先执行一次do，具体可以看如下代码\n```\npublic static void main(String[] args) {\n    boolean flag = false;\n    int i = 0;\n    while(flag){\n        i++;\n    }\n    System.out.println(\"while循环后结果：\"+i);\n    do{\n        i++;\n    } while (flag);\n    System.out.println(\"do while循环后结果：\"+i);\n}\n//输出\nwhile循环后结果：0\ndo while循环后结果：1\n```\n\n#### 45. 如何跳出多重循环？\n（1）普通的跳出循环通常使用break，但是break只能跳出当前循环，如果外层仍然有循环则无法跳出\n（2）如果需要跳出多重循环则可以在指定的某一层循环设定为名字，则在break后边增加制定的名字，即可直接跳出具体某一层的循环，具体代码如下：\n```\npublic static void main(String[] args) {\n    // 为外层循环设定一个名字\n    outer:\n    for (int i = 0; i < 5; i++) {\n        // 内层循环\n        inner:\n        for (int j = 0; j < 3; j++) {\n            System.out.println(\"i的值为:\" + i + \" j的值为:\" + j);\n\n            if (j == 1) {\n            // 跳出outer标签所标识的循环。\n                //break inner;\n                break outer;\n            }\n        }\n    }\n}\n//输出\ni的值为:0 j的值为:0\ni的值为:0 j的值为:1\n//但是如果使用break inner则只能跳出内层循环，外层循环仍然执行，具体输出如下\ni的值为:0 j的值为:0\ni的值为:0 j的值为:1\ni的值为:1 j的值为:0\ni的值为:1 j的值为:1\ni的值为:2 j的值为:0\ni的值为:2 j的值为:1\ni的值为:3 j的值为:0\ni的值为:3 j的值为:1\ni的值为:4 j的值为:0\ni的值为:4 j的值为:1\n\n```\n\n#### 46. int 和 Integer 有哪些区别？\n（1）int和Integer的区别\nInteger是int的包装类；int是基本数据类型,长度为32位（4）字节。\nInteger是Java提供的封装类，在java.lang.Integer包里面。\nInteger变量必须实例化后才能使用；int变量不需要。\nInteger实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值。\nInteger的默认值是null；int的默认值是0\n\n（2）关于Integer和int的深入比较\n由于Integer变量实际上是对一个Integer对象的引用，所以两个通过new生成的Integer变量永远是不相等的（因为new生成的是两个对象，其内存地址不同）。\n```\nInteger i = new Integer(100);\ninteger j = new Integer(100);\nSystem.out.println(i==j);\n//输出\nfalse\n```\nInteger变量和int变量比较时，只要两个变量的值是向等的，则结果为true（因为包装类Integer和基本数据类型int比较时，Java会自动拆包装为int，然后进行比较，实际上就变为两个int变量的比较）\n```\nInteger i = new Integer(100);\nint j = 100;\nSystem.out.ptintln(i == j);\n//输出\ntrue\n```\n非new生成的Integer变量和new Integer()生成的变量比较时，结果为false。（因为 ①当变量值在-128~127之间时，非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同）\n```\nInteger i = new Integer(100);\nInteger j = 100;\nSystem.out.print(i == j);\n//输出\nfalse\n```\n对于两个非new生成的Integer对象，进行比较时，如果两个变量的值在区间-128到127之间，则比较结果为true，如果两个变量的值不在此区间，则比较结果为false。\n```\nInteger i = 100;\nInteger j = 100;\nSystem.out.print(i == j); \n//输出\ntrue\nInteger i = 128;\nInteger j = 128;\nSystem.out.print(i == j); \n//输出\nfalse\n```\n对于上面输出结果的原因：\njava在编译Integer i =100 ;时，会翻译成为Integer i = Integer.valueOf(100);而java API中对Integer类型的valueOf的定义如下：\n```\npublic static Integer valueOf(int i){\n    assert IntegerCache.high >= 127;\n    if (i >= IntegerCache.low && i <= IntegerCache.high){\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    }\n    return new Integer(i);\n}\n```\n从上面我们可以知道给 Interger 赋予的 int 数值在 - 128 - 127 的时候，直接从 cache 中获取，这些 cache 引用对 Integer 对象地址是不变的，但是不在这个范围内的数字，则 new Integer (i) 这个地址是新的地址，不可能一样的.\n\n#### 47. 有了 int 为什么还要有 Integer ？\n（1）因为Java语言是面向对象的，对象封装可以把属性（数据跟处理这些数据的方法）结合在一起。比如Integer就有parseInt()等方法来专门处理int型相关的数据。\n（2）在Java中绝大部分方法或类都是用来处理类类型对象的，如ArrayList和LinkedList集合类就只能以类作为它的存储对象，而这时如果想把一个int型的数据存入list是不可能的，必须把它包装成类，也就是Integer才能被List所接受。\n\n#### 48. Integer 的装箱和拆箱\n（1）自动装箱，将基本数据类型转化为对象\n```\n//等价于Integer num = Integer.valueOf(100);\nInteger i=100;\n```\n（2）自动拆箱，将对象转化为基本数据类型\n```\n//声明一个Integer对象\nInteger i = 100;\n//进行计算时自动拆箱\ni++;\n```\n\n#### 49. String是否是基本数据类型？\n（1）首先说不是基本类型。\n（2）JAVA一共有八种基本数据类型：byte，short，char，int，long，double，float，boolean\n\n#### 50. String aaaStr=\"aaa\" 与 String aaaStr = new String(\"aaa\") 相同么？\n（1）String aaaStr = \"aaa\" 会将字符串aaa分配到常量池中，如果常量池中没有该字符串，则会在常量池中创建一个字符串aaa，然后把地址赋给变量aaaStr；如果存在字符串aaa，则直接将常量池中字符串aaa的地址赋给aaaStr\n（2）String aaaStr = new String(\"aaa\") 会在堆内存中创建一个String对象，并将对象的地址赋给aaaStr，后期如果仍然有String bbbStr = new String(\"aaa\") 及时字符串都是aaa，但是仍然是新创建一个String对象，是分别的两个对象\n\n#### 51. 什么是反射？\n（1）Java中反射是动态获取信息以及动态调用对象方法的一种反射机制。\n（2）Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。而这也是Java被视为动态语言的一个关键性质。\n（3）Java反射的功能是在运行时判断任意一个对象所属的类，在运行时构造任意一个类的对象，在运行时判断任意一个类所具有的成员变量和方法，在运行时调用任意一个对象的方法，生成动态代理。\n（4）Java反射的实现方式\n第一种，使用 Class.forName 静态方法。当你知道该类的全路径名时，你可以使用该方法获取 Class 类对象。\n```\nClass clz = Class.forName(\"com.aaa.Apple\");\nApple apple = (Apple)clz.newInstance();\n```\n第二种，使用 .class 方法。这种方法只适合在编译前就知道操作的 Class。\n```\nClass clz = Apple.class;\nConstructor constructor = clz.getConstructor();\nApple apple = (Apple)constructor.newInstance();\n```\n第三种，使用类对象的 getClass() 方法。\n```\nString str = new String(\"Hello\");\nClass clz = str.getClass();\n```\n\n#### 52. Java 中为什么不允许从静态方法中访问非静态变量？\n（1）静态变量属于类本身，在类加载的时候就会分配内存，可以通过类名直接访问\n（2）非静态变量属于类的对象，只有在类的对象产生时，才会分配内存，通过类的实例去访问\n（3）静态方法也属于类本身，但是此时没有类的实例，内存中没有非静态变量，所以无法调用\n（4）说白了就是静态方法读取非静态变量，很可能不知道当时值是什么，不确定，没有实例化，静态方法也找不到它\n\n#### 53. float 和 double 的区别是什么？\n（1）内存中占有的字节数不同，单精度浮点数float在内存中占有4个字节，双精度浮点数double在内存中占有8个字节\n（2）有效数字位数不同，单精度浮点数有效数字8位，双精度浮点数有效数字16位；\n（3）数值取值范围不同，单精度浮点数的表示范围：-3.40E+38~3.40E+38，双精度浮点数的表示范围：-1.79E+308~-1.79E+308\n（4）在程序中处理速度不同 一般来说，CPU处理单精度浮点数的速度比双精度浮点数的速度快；如果不声明，默认小数是double类型，如果想用float，要进行强转。\n举例float f=1.3；会编译报错，正确的写法是float f = (float)1.3，或者float a = 1.3f，或者float a = 1.3f\n注意 float是八位有效数字，第七位会四舍五入。\n\n#### 54. Java 中 6*0.1 == 0.6 是否为true？\n返回false，因为浮点数不能完全精确的表示，一般会损失一定的精度。下面例子可以看出来6*0.1得到结果是0.6000000000000001，但是5*0.1却没有问题\n```\npublic static void main(String[] args) {\n    System.out.println(6*0.1 == 0.6);\n    System.out.println(6*0.1);\n    System.out.println(0.6);\n    System.out.println(5*0.1 == 0.5);\n    System.out.println(5*0.1);\n    System.out.println(0.5);\n}\n//输出\nfalse\n0.6000000000000001\n0.6\ntrue\n0.5\n0.5\n```\n\n#### 55. 实例化创建对象有几种方式？\n（1）通过 new 对象的方式创建\n`TestBean a = new TestBean();`\n（2）通过 clone() 方法创建\n`TestBean b = a.clone();`\n（3）通过反射机制创建，第51题已经写出了反射的创建例子代码\n```\nClass clz = Class.forName(\"com.aaa.Apple\");\nApple apple = (Apple)clz.newInstance();\n\nClass clz = Apple.class;\nConstructor constructor = clz.getConstructor();\nApple apple = (Apple)constructor.newInstance();\n\nString str = new String(\"Hello\");\nClass clz = str.getClass();\n```\n（4）序列化反序列化\n```\npublic static void main(String[] args) {\n    ObjectInputStream in = ObjectInputStream(new FilelnputStream(\"/data.txt\"));\n    TestBean a = (TestBean) in.readObject();\n    System.out.println(\"反序列化a：\" + a);\n    in.close();\n}\n```\n\n#### 56. @NotEmpty,@NotNull和@NotBlank的区别\n（1）@NotEmpty，不能为null，且Size>0\n（2）@NotNull，不能为null，但可以为empty,没有Size的约束\n（3）@NotBlank，只用于String,不能为null且trim()之后size>0\n\n#### 57. try {}里有一个return语句，那么紧跟在这个try后的finally{}里的code会不会被执行，什么时候被执行，在return前还是后?\n（1）finally{}中的语句是一定会执行的，那么这个可能正常脱口而出就是return之前，return之后可能就出了这个方法了，鬼知道跑哪里去了，但更准确的应该是在return中间执行，请看下面程序代码的运行结果：\n```\npublic class TestMain {\n    public static void main(String[] args) {\n        TestMain test = new TestMain();\n        System.out.println(test.test());\n        ;\n    }\n\n    public int test() {\n        int x = 1;\n        try {\n            System.out.println(\"try method\");\n            return x;\n        } finally {\n            System.out.println(\"finally\");\n            ++x;\n        }\n    }\n}\n//输出\ntry method\nfinally\n1\n```\n（2）运行结果分别按照顺序输出，try内部日志，finally内部日志，最终返回结果1\n（3）为什么呢？主函数调用子函数并得到结果的过程，好比主函数准备一个空罐子，当子函数要返回结果时，先把结果放在罐子里，然后再将程序逻辑返回到主函数。所谓返回，就是子函数说，我不运行了，你主函数继续运行吧，这没什么结果可言，结果是在说这话之前放进罐子里的。\n\n#### 58. 能将 int 强制转换为 byte 类型的变量吗？如果该值大于 byte 类型的范围，将会出现什么现象？\n可以做强制转换，但是 Java 中 int 是 32 位的，而 byte 是 8 位的，但是，如果强制转化，int 类型的高 24 位将会被丢弃，因为byte 类型的范围是从 -128 到 128。\n\n#### 59. 字节流与字符流的区别\n（1）要把一段二进制数据数据逐一输出到某个设备中，或者从某个设备中逐一读取一段二进制数据，不管输入输出设备是什么，我们要用统一的方式来完成这些操作，用一种抽象的方式进行描述，这个抽象描述方式起名为IO流，对应的抽象类为OutputStream和InputStream，不同的实现类就代表不同的输入和输出设备，它们都是针对字节进行操作的。\n（2）计算机中的一切最终都是二进制的字节形式存在。对于经常用到的中文字符，首先要得到其对应的字节，然后将字节写入到输出流。读取时，首先读到的是字节，可是我们要把它显示为字符，我们需要将字节转换成字符。由于这样的需求很广泛，Java专门提供了字符流包装类。\n（3）底层设备永远只接受字节数据，有时候要写字符串到底层设备，需要将字符串转成字节再进行写入。字符流是字节流的包装，字符流则是直接接受字符串，它内部将串转成字节，再写入底层设备，这为我们向IO设备写入或读取字符串提供了一点点方便。\n（4）字符向字节转换时，要注意编码的问题，因为字符串转成字节数组，其实是转成该字符的某种编码的字节形式，读取也是反之的道理。\n\n#### 60. 什么是java序列化，如何实现java序列化？或者请解释Serializable接口的作用。\n（1）将一个java对象变成字节流的形式传出去或者从一个字节流中恢复成一个java对象，例如，要将java对象存储到硬盘或者传送给网络上的其他计算机，这个过程我们可以自己写代码去把一个java对象变成某个格式的字节流再传输。\n（2）jre本身就提供了这种支持，我们可以调用OutputStream的writeObject方法来做，如果要让java帮我们做，要被传输的对象必须实现serializable接口，这样，javac编译时就会进行特殊处理，编译的类才可以被writeObject方法操作，这就是所谓的序列化。需要被序列化的类必须实现Serializable接口，该接口是一个mini接口，其中没有需要实现方法，implements Serializable只是为了标注该对象是可被序列化的。\n（3）在web开发中，如果对象被保存在了Session中，tomcat在重启时要把Session对象序列化到硬盘，这个对象就必须实现Serializable接口。如果对象要经过分布式系统进行网络传输，被传输的对象就必须实现Serializable接口。\n\n#### 61. switch语句能否作用在byte上，能否作用在long上，能否作用在String上?\n（1）在switch（e）中，e只能是一个整数表达式或者枚举常量，整数表达式可以是int基本类型或Integer包装类型，由于byte,short,char都可以隐含转换为int，所以，这些类型以及这些类型的包装类型也是可以的。\n（2）jdk1.7之后加入String，通过hashCode转化为int，所以可以适用于switch语句中。\n（3）long类型都不符合switch的语法规定，并且不能被隐式转换成int类型，所以，它们不能作用于swtich语句中。\n\n#### 62. 使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？\n（1）使用final关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的。例如，对于如下语句：\n```\nfinalStringBuffer a=new StringBuffer(\"immutable\");\n//执行如下语句将报告编译期错误：\na=new StringBuffer(\"\");\n//但是，执行如下语句则可以通过编译：\na.append(\" broken!\");\n```\n（2）有人在定义方法的参数时，可能想采用如下形式来阻止方法内部修改传进来的参数对象\n```\npublic void method(final StringBuffer param){\n}\n```\n（3）在该方法内部仍然可以增加如下代码来修改参数对象\n```\nparam.append(\"a\");\n```\n\n#### 63. 是否可以从一个static方法内部发出对非static方法的调用？\n可以，可以通过在内部对非static方法的类实例化后，在调用即可，代码如下\n```\npublic class TestController {\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 5; i++) {\n            TestController.ttt();\n        }\n    }\n    public static void ttt() {\n        TestController a = new TestController();\n        System.out.println(a);\n        a.test();\n    }\n\n    public void test(){\n        System.out.println(\"1111\");\n    }\n}\n//输出\ncom.buxuesong.account.api.controller.TestController@2530c12\n1111\ncom.buxuesong.account.api.controller.TestController@73c6c3b2\n1111\ncom.buxuesong.account.api.controller.TestController@48533e64\n1111\ncom.buxuesong.account.api.controller.TestController@64a294a6\n1111\ncom.buxuesong.account.api.controller.TestController@7e0b37bc\n1111\n```","source":"_posts/MyBlog.md","raw":"---\ntitle: 测试测试吃\ndate: 2023-03-16 14:48:17\ntoc: true\ntags:\n- 后端\n- 面试题\ncategories:\n- 后端\n---\n#### 可以扫描下面二维码访问我的小程序来打开，随时随地通过微信访问。 \n \n##### 这个是一些Java基础知识常见面试题，以及答案，我会逐个写出答案，实际上也是我学习的过程，一步一步来吧。 \n \n#### 1. java中==和equals和hashCode的区别 \n（1）==如果作用于基本数据类型的变量（byte,short,char,int,long,float,double,boolean ），则直接比较其存储的\"值\"是否相等；如果作用于引用类型的变量（String），则比较的是所指向的对象的地址（即是否指向同一个对象）。\n（2）equal如果直接使用Object继承的方法则和==相同，但是如果equal重写的比较方法，自定义后就按照equal后的定义比较了 \n（3）hashCode是将bean实体转换为哈希编码的方法 \n \n#### 2. int与integer的区别 \n \n int 是java的基本类型，非null，初始值0，Integer是int的封装类型，可为null，以及一些方法，max，min等 \n\n<!-- more -->\n\n#### 3. 抽象类的意义\n\n无法实例化，没有足够的信息来描述一个对象，实际是对某类对象的抽象出来的一些共有的定义以及方法。为公共的对象的非抽象方法提供了通用的定义，方便子类的使用。也可以定义抽象方法，不能有方法体，这种方法子类必须重写（这个实际和接口是一样的，如果子类也是抽象类可以不重写）\n \n#### 4. 接口和抽象类的区别\n一个类可以实现多个接口，但是一个类只能有一个抽象类的父类，接口所有方法都是抽象方法，必须由实现类实现这些抽象方法，而抽象类可以有非抽象方法，抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 public static final 类型的， 接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。\n \n#### 5. 能否创建一个包含可变对象的不可变对象?\n```    \npublic class TestNotChanged {\n    public static final TestDto testDto = new TestDto();\n    public static void main(String[] args) {\n        testDto.setCommParam(CommParam.builder().paramValue(\"1111\").build());\n        System.out.println(testDto.getCommParam());\n        testDto.setCommParam(CommParam.builder().paramValue(\"2222\").build());\n        System.out.println(testDto.getCommParam());\n    }\n}\n//输出\nCommParam{paramKey='null', paramValue='1111'}\nCommParam{paramKey='null', paramValue='2222'}\n\n```\n#### 6. 谈谈对java多态的理解\n继承父类，重写父类的方法，Parent parent = new Child();这时在执行父类与子类都有的方法，实际会调用子类的方法。\n#### 7. String、StringBuffer、StringBuilder区别\nString 字符串常量、StringBuffer 字符串变量（线程安全，所有方法都是synchronized）、StringBuilder 字符串变量（非线程安全，效率高，没有synchronized）\n#### 8. 泛型中extends和super的区别\nextends表示泛型的上限（表示必须是该类型或者该类型的子类），super表示泛型的下限（表示必须是该类型或者该类型的父类）\n#### 9. 进程和线程的区别\n进程cpu执行任务的一段任务，而线程是这个任务在cpu上执行的具体操作。\n#### 10. 序列化的方式\n1>对象实现了序列化接口Serializable\n2>实现接口Externalizable,实现writeExternal和readExternal方法\n#### 11. string 转换成 integer的方式及原理\n第一位可以是符号位（正负），正负值会在最后一步取正反。从左到右按位取值，例如325，第一位为3，则循环取，取出3，将3变为-3放到result中（个人认为这个是避免从正数超过int的最大值溢出），再取第二位2，这时需要先将result*进制（一般为10进制），变为-30，之后-30减去2得到result为-32，再取第三位5，先将result*进制，result变为-320，之后-320减去5得到-325，循环完毕，这个值是正数，所以需要取反，得到325.\n#### 12. 静态属性和静态方法是否可以被继承？是否可以被重写？以及原因？\n可以被子类继承使用，但是重写后不生效，因为static方法以及属性都是全局的，需要通过具体class名称来使用，即使方法名或者属性名相同，父类的静态方法只能是父类后边带方法，子类的静态方法只能是子类后边带方法。\n```\npublic class Parent {\n    public static String aaa = \"aaa\";\n    public static String testMethod() {\n        return aaa;\n    }\n}\npublic class Child extends Parent {\n    public static String aaa = \"aaaa\";\n    public static String testMethod() {\n        return aaa;\n    }\n    public static void main(String[] args) {\n        Parent a = new Child();\n        System.out.println(a.aaa);\n        Child b = new Child();\n        System.out.println(b.aaa);\n        System.out.println(Parent.testMethod());\n        System.out.println(Child.testMethod());\n    }\n}\n//输出\naaa\naaaa\naaa\naaaa\n```\n#### 13. 成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及项目中的应用\n成员内部类:定义在类内部的非静态类;\n静态内部类:定义在类内部的静态类;\n局部内部类:定义在方法中的类（只在某个方法中使用）;\n匿名内部类:没有访问修饰符的直接通过new出来的内部类（例如事件监听的回调方法）\n```\n//匿名内部类\npublic void test() {\n        Object obj = new Object() {\n            @Override\n            public String toString() {\n                System.out.println(b);\n                return String.valueOf(a);\n            }\n        };\n        System.out.println(obj.toString());\n    }\n\n```\n#### 14. 讲一下常见编码方式？\nASCII，ISO-8859-1、GBK/GB2312/UTF-16(双字节)/UTF-8（变长，开头是0表示ASCII，开始是11表示首字节，开始时10表示非首字节，前一个才是首字节）\n如何格式化日期?\n```\nDate FormatDate = new SimpleDateFormat(\"YYYY-MM-DD\").parse(\"2020-01-01\")\nLocalDateTime.now(ZoneId.of(\"Asia/Shanghai\")).format(DateTimeFormatter.ofPattern(\"YYYY-MM-DD\"))\n```\n\n#### 15. Java的异常体系\n\n\n\n#### 16. 什么是异常链\n不会覆盖原有的异常信息，将之前throw出来的异常加入到新的异常中\n```\n// 异常链写法1\nException e2 = new Exception(\"第2个异常\");\ne2.initCause(e); // 异常链信息的传递\nthrow e2;\n// 异常链写法2\n// throw new Exception(\"第2个异常\", e);\n```\n\n#### 17. throw和throws的区别\nthrow表示创建新的异常并扔出来，而throws表示方法定义的末尾，将内部可能throw出来的异常直接在方法级抛出\n\n#### 18. 反射的原理，反射创建类实例的三种方式是什么。\n```\n//第一种，使用 Class.forName 静态方法。当你知道该类的全路径名时，你可以使用该方法获取 Class 类对象。\nClass clz = Class.forName(\"com.aaa.Apple\");\nApple apple = (Apple)clz.newInstance();\n\n// 第二种，使用 .class 方法。\n//这种方法只适合在编译前就知道操作的 Class。\nClass clz = Apple.class;\nConstructor constructor = clz.getConstructor();\nApple apple = (Apple)constructor.newInstance();\n//第三种，使用类对象的 getClass() 方法。\nString str = new String(\"Hello\");\nClass clz = str.getClass();\n```\n\n#### 19. java当中的四种引用\n强引用：直接通过=赋值，内存不够也不会被回收，常见用法；\n软引用：SoftReference<?>来表示，内存不足时会回收软引用，写完下面代码才理解，实际上这个是定义了一个引用，指向了里面的地址，实际上即使里面的变量设定为null了，引用还在，但是当内存不足时候回收掉，软引用就无法get到值了，变为null了，另外注意一定是new String出来，而不是直接写=\"123\",这样写多少都是一个地址，无法回收，但是实际上这个没有回收成功，软引用的场景是缓存，图片缓存等；\n弱引用：WeakReference<?>来表示，和软引用的写法类似，但是只要内存回收，弱引用就会被回收，下面的回收成功了，WeakHashMap，可以被回收的key值（HashMap的key值在删除前在不能被回收），而这种WeakHashMap的key在内存不足时可以被回收，使用前需要判断是否存在；\n虚引用（PhantomReference） ，只能通过 ReferenceQueue 引用队列一起使用，创建时放入queue中，使用时通过queue的poll取出来，但是随时可能会被回收。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。实际这个就是看何时发生回收的一个监控，目前没有其他的使用场景。\n```\n//弱引用\n    public static void main(String[] args) throws Exception {\n        String a = new String(\"1111\");\n        WeakReference<String> list =new WeakReference(a);\n        a = null;\n        while(true) {\n            System.out.println(list.get());\n            System.out.println(\"-----\");\n            System.gc();\n            System.out.println(list.get());\n            System.out.println(\"==========================================================================\");\n            if(list.get() == null){\n                System.out.println(\"BREAKBREAKBREAKBREAK\");\n                break;\n            }\n        }\n    }\n//输出\n[GC (Allocation Failure)  1023K->708K(5632K), 0.0011759 secs]\n[GC (Allocation Failure)  1732K->1034K(5632K), 0.0010715 secs]\n[GC (Allocation Failure)  2056K->1224K(5632K), 0.0008859 secs]\n[GC (Allocation Failure)  2247K->1460K(5632K), 0.0009643 secs]\n[GC (Allocation Failure)  2484K->1577K(5632K), 0.0009887 secs]\n[GC (Allocation Failure)  2586K->1703K(5632K), 0.0015657 secs]\n[GC (Allocation Failure)  2727K->1855K(5632K), 0.0017342 secs]\n[GC (Allocation Failure)  2879K->2183K(5632K), 0.0010898 secs]\n1111\n-----\n[GC (System.gc())  2990K->2264K(5632K), 0.0009776 secs]\n[Full GC (System.gc())  2264K->1588K(5632K), 0.0179253 secs]\nnull\n==========================================================================\nBREAKBREAKBREAKBREAK\n//虚引用\n        String status = new String(\"123\");\n        ReferenceQueue<String> queue = new ReferenceQueue<>();\n        PhantomReference<String> test = new PhantomReference<String>(status, queue);\n        status = null;\n        System.out.println(queue.poll());\n        System.gc();\n        Thread.sleep(2000L);\n        System.out.println(queue.poll());\n//输出\nnull\njava.lang.ref.PhantomReference@58372a00\n\n```\n#### 20. 深拷贝和浅拷贝的区别是什么?\n这里考点是对基本类型和引用类型的理解，基本类型浅拷贝和深拷贝没什么区别，都是copy出一份到新的内存地址，但是引用类型就不一样了，如果是浅拷贝，一些引用变量还是指向之前的地址，这就导致了修改了拷贝前的Bean的某个值，则另外一个Bean的该变量也会变化，因为内存地址是一样的，因此需要重写clone方法，将该变量copy一份到新内存地址，这样修改任何一个都不互相影响。\n#### 21. 什么是编译器常量？使用它有什么风险？\n这里考点是对编译器（期）常量和运行时常量的理解\n```\n    //编译期常量\n    public static final String TEST = \"TEST\";\n    //运行时常量\n    public static final double TEST_DOUBLE = Math.random();\n```\n编译期常量实际上是在编译的时候初始化的变量，而运行时常量只有在运行时候才会初始化，编译时不知道是什么值。\n在咱们大型项目中，会有增量打升级包的情况，此时如果A类引用了其B类的一个编译期常量（A类本次没有编译，B类的常量值修改后编译），那么上线后，会发现A类引用的编译期常量还是之前的值，会导致bug的产生，因此一定要注意一起编译。这个其实引入了JVM的知识点，A类引用了B累的编译期常量，实际会在编译时写死在A类中，也就是即使B类编译变化了也不影响A类的引用。\n\n#### 22. 你对String对象的intern()熟悉么?\n\nintern实际上是在常量池里寻找与其相等的String，并把地址返回过来，具体可以看下面的，s1和s4通过+实际上是不同的String，但是由于字符串实际相同，因此intern()也是相同的。\n```\n        String s1 = \"abc\";\n        String s2 = \"a\";\n        String s3 = \"bc\";\n        String s4 = s2 + s3;\n        System.out.println(s1 == s4);\n        System.out.println(s1.intern() == s4.intern());\n```\n#### 23. a=a+b与a+=b有什么区别吗?\n\n其实你注意下，他把类型去掉了？为什么呢？\n这就是问题所在，隐去类型就是题目关心的，因为实际上如果类型一致，那么就不会有问题这两个操作是一致的，但是如果类型不一致，那么+=就会多出来一步类型转换。\n```\n\tbyte a=1;\n\t//a+=4;这个和下面实际上是相等的操作\n    a = (byte)(a+4);\n    //但是如果这么写编译期会报错，认为a+4转换为了int，但是实际上a是byte，两个类型不符合了\n    a = a+4;\n```\n#### 24. 静态代理和动态代理的区别，什么场景使用？\n这个有点长，我写了个帖子：\nhttps://segmentfault.com/a/1190000040962971\n#### 25. 如何将一个Java对象序列化到文件里？\n可以查看我的另一个帖子：\nhttps://segmentfault.com/a/1190000040941021\n#### 26. 说说你对Java反射的理解\n可以查看我的另一个帖子：\nhttps://segmentfault.com/a/1190000040913240\n#### 27. 说说你对Java注解的理解\n可以查看我的另一个帖子：\nhttps://segmentfault.com/a/1190000040957885\n#### 28. 说说你对依赖注入的理解\n在没有Spring或者在纯java的代码中，都是自己去new出来的对象，这样会导致很多代码中包含了大量的new，set各种代码\n例如如果我需要数据库操作先创建Connection连接等一系列操作，很繁琐\n出现了Spring以后，Spring容器把这些操作集合了，也就是咱们BeanA需要BeanB的时候，不需要再去new操作了，Spring容器帮助咱们把BeanB创建好了\nBeanA想要使用BeanB直接拿来就可以用了(Spring容器帮助把BeanB注入到BeanA中了，BeanA依赖的BeanB就这样被注入进来了)，这种操作就是依赖注入了。\n其实很多人还说有Ioc控制反转，个人理解就是以前需要BeanB就new出来就好了，现在容器把创建BeanB的过程拿走了，创建BeanB的过程被容器控制了。\nDI依赖注入，实际就是BeanA依赖的BeanB被容器帮助下，容器把BeanB注入到了BeanA中。\n#### 29. 说一下泛型原理，并举例说明\n实际上java的泛型是个伪泛型，使用起来很方便，免去手写转型操作了。\n具体原理时编译器在编译前会检测你针对List<String>这种定义的集合中存入内容时候，会去检测你传入的类型是否符合类型，如果不符合就给你提示类型传入的不对。\n另外看源码：\n```\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add(\"Sfsdf\");\n        String result = list.get(0);\n        System.out.println(result);\n    }\n```\n反编译后源码的，发现了什么，list取出来之后增加一个String转型，这个就是伪泛型了，实际上泛型编译成class时候，会帮助咱们进行转型操作，而不像C中的泛型，独立的类型，不需要转型操作：\n```\n  public static void main(String[] args)\n  {\n    List<String> list = new ArrayList();\n    list.add(\"Sfsdf\");\n    String result = (String)list.get(0);\n    System.out.println(result);\n  }\n```\n更多的可以查看我的另一个帖子：\nhttps://segmentfault.com/a/1190000040835933\n\n#### 30. Java中String的了解\nString类其实是通过char数组来保存字符串的\nString类是final类，也即意味着String类不能被继承，并且它的成员方法都默认为final方法\nString对象一旦被创建就是固定不变的了，对String对象的任何改变都不影响到原对象，相关的任何change操作都会生成新的对象\n有两种创建方式直接通过\"\"（这种方式直接使用常量池的常量）创建以及new String(\"\")（这种方式，会将对象存储到堆中）的方式\nString str3=str1+str2这个操作实际触发了StringBuilder的append方法以及toString方法。\n但是String str4=\"abc\"+\"def\";这种情况下，abc和def都在常量池内，因此拼接时候直接在常量池内拼接，生成的abcdef还在常量池中\nString.intern()会直接从常量池里找到\nString是不可变字符串对象，StringBuilder和StringBuffer是可变字符串对象（其内部的字符数组长度可变）\nString中的对象是不可变的，也就可以理解为常量，显然线程安全。StringBuffer 与 StringBuilder中的方法和功能完全是等价的，只是StringBuffer 中的方法大都采用了synchronized关键字进行修饰，因此是线程安全的，而StringBuilder没有这个修饰，可以被认为是非线程安全的。\n\n#### 31. String为什么要设计成不可变的？\n如果设计成StringBuilder这种，作为key放在HashSet中，StringBuilder是可变的，如果分别放入了两个不同值的StringBuilder sb1和sb2，放入了后期修改了sb2的值和sb1的值相同，就会违反了HashSet的key值唯一性，另外在大量使用字符串，很多重复的字符串情况下，也是节省了很多存储空间，关键是它不可变所以也不会出现问题。\n#### 32. Object类的equal和hashCode方法重写，为什么？\n首先equal直接使用Object的话，是和==表示了相同的意思，因此如果有一些复杂的Bean需要特殊的比较时候，就需要重启equal了。比如修改了eqaul方法，某些情况下表示相同了，如果不重写hashCode时候，再存入HashSet或者HashMap的做为key的时候，可能不相同，这样就会表达出不同的意思。\n另外java还有个规定：hashcode()不等，一定能推出equals()也不等；hashcode()相等，equals()可能相等，也可能不等。\n#### 33. Java中实现多态的机制是什么？\nJava实现多态有三个必要条件：继承、重写、向上转型。\n继承：在多态中必须存在有继承关系的子类和父类。\n重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。\n向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。\n只有满足了上述三个条件，我们才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象，从而达到执行不同的行为。\n重载(overload)和重写(override)\n如果一个子类继承了一个父类，子类中拥有和父类相同方法名称，返回值，参数类型的话，就是重写，会执行子类中的方法。\n如果一个类中定义了多个同名方法，他们有不同的参数类型或者参数数量或者返回值类型，那就叫重载\n=========以下内容2022.08.14新增==========\n#### 34. 面向对象编程的特征有哪些？\n（1）封装 (Encapsulation)，是指隐藏对象的属性和具体如何实现操作，控制成员属性的访问以及修改权限，只能通过专用的public方法来访问获取。具体如下。\n```\nprivate String test = \"测试封装\";\npublic String getTest(){\nreturn this.name;\n}\n```\n（2）继承 (Inheritance)，就是指子类继承父类，使得库子类也能具有父类相同的行为。\n（3）多态 (Polymorphism)是指同一个行为具有多个不同的表现形式或形态，如一个类的方法在不同的参数情况有不同表现形式。\n\n#### 35. i++和++i的区别\n（1）i++是先使用当前i值使用，再对i进行自身+1操作。\n（2）++i则相反，现对自身+1操作，再使用+1后的结果操作。\n\n#### 36. JDK和JRE的区别\n（1）JRE，Java Runtime Environment（java运行时环境）。即java程序的运行时环境，包含了java虚拟机，java基础类库。\n（2）JDK，Java Development Kit（java开发工具包）。即java语言编写的程序所需的开发工具包。\n（3）JDK包含了JRE，同时还包括java源码的编译器javac、监控工具jconsole、分析工具jvisualvm等。\n\n#### 37. JAVA的关键字有哪些？\n（1）48个关键字：abstract、assert、boolean、break、byte、case、catch、char、class、continue、default、do、double、else、enum、extends、final、finally、float、for、if、implements、import、int、interface、instanceof、long、native、new、package、private、protected、public、return、short、static、strictfp、super、switch、synchronized、this、throw、throws、transient、try、void、volatile、while。\n（2）2个保留字（现在没用以后可能用到作为关键字）：goto、const。\n（3）3个特殊直接变量：true、false、null。\n\n#### 38. java中常量是什么？\n常量就是不变的数据量, 在程序执行的过程中其值不可以发生改变。\n如下所示就是常量的一种\n```\nprivate final static String NAME = \"AAAABBBB\";\n```\n\n#### 39. java中常量有哪些类型？\n（1）整数常量\n整型常量是整数类型的数据，有二进制、八进制、十进制和十六进制4种表示形式具体表示形式如下。\n十进制表示方式：正常数字。 如 13、25等\n二进制表示方式：以 0b(0B) 开头。 如0b1011 、0B1001\n十六进制表示方式：以 0x(0X) 开头。 数字以0-9及A-F组成 如0x23A2、0xa、0x10\n八进制表示方式：以 0 开头。 如01、07、0721\n（2）浮点数常量，浮点数常量就是在数学中用到的小数，也叫小数类型，分为foat单精度浮点数和double双精度浮点数两种类型。如1.0、-3.15、3.168等\n（3）字符常量，字符常量用于表示一个字符，一个字符常量要用一对英文半角格式的单引’’号引起来，它可以是英文字母、数字、标点符号以及由转义序列来表示的特殊字符。如 'a'，'A', '0', '家'。\n（4）字符串常量，字符串常量用于表示一串连续的字符，一个字符串常量要用一对英文半角格式的双引号””引起来，如 \"我爱Java\"，\"0123\"，\"\"，\"null\"。\n（5）布尔型常量值，Java 的布尔型常量只有两个值，即 false（假）和 true（真）。\n（6）null常量，null常量只有一个值null，表示对象的引用为空。\n\n#### 40. public、private、protected以及默认的区别\n（1）public，表示紧跟其后的成员可以被任何人引用\n（2）private，表示紧跟其后的成员除了类型创建者和类型内部的方法，任何人都不可引用，否者程序编译报错\n（3）protected，与private效果相当，差别仅在于继承的类可以访问protected成员\n（4）默认访问权限（即定义属性时不加任何关键字修饰），默认访问权限通常被称为“包访问权限”，在这种权限下的成员变量可被同一个包中的其他类访问\n```\npackage com.buxuesong;\n\npublic class TestBean {\n    public int publicParam;\n    String defaultParam;\n    protected String protectedParam;\n    private String privateParam;\n}\n\npackage com.buxuesong;\n\npublic class ChildTestBean extends TestBean {\n    public void setBean() {\n        TestBean testBean = new TestBean();\n        //public修饰成员可被任何人访问\n        testBean.publicParam = 12;\n        //同一个包中的类可访问默认权限成员\n        testBean.defaultParam = \"Bob\";\n        //继承的类可访问protected成员\n        testBean.protectedParam = \"UK\";\n        //ERROR 继承的类无法访问private成员\n        testBean.privateParam = \"man\";\n    }\n}\n\npackage com.buxuesong.test;\n\nimport com.buxuesong.TestBean;\n\npublic class DifferentPackageBean {\n    public void setBean() {\n        TestBean testBean = new TestBean();\n        //public修饰成员可被任何人访问\n        testBean.publicParam = 12;\n        //ERROR 包访问权限成员无法被其他包中的类访问\n        testBean.defaultParam = \"Bob\";\n        //ERROR protected成员无法被其他包中的类访问\n        testBean.protectedParam = \"UK\";\n        //ERROR private成员只能被类型创建者及类型内部方法访问\n        testBean.privateParam = \"man\";\n    }\n}\n```\n\n#### 41. this和super有什么区别？\n（1）this是自身的一个对象，代表对象本身，指向对象本身的一个指针。\n（2）super可以理解为是指向自己超（父）类对象的一个指针，而这个超类指的是离自己最近的一个父类。\n（3）属性的区别，this访问本类中的属性，如果本类没有此属性则从父类中继续查找。super访问父类中的属性。\n（4）方法的区别，this访问本类中的方法，如果本类没有此方法则从父类中继续查找。super访问父类中的方法。\n（5）构造的区别，this调用本类构造，必须放在构造方法的首行。super调用父类构造，必须放在子类构造方法首行。\n\n#### 42. &和&&的区别是什么？\n（1）java 中 && 和 & 都是表示与的逻辑运算符，都表示逻辑运输符 and，当两边的表达式都为 true 的时候，整个运算结果才为 true，否则为 false。\n（2）& 叫做按位与，& 直接操作整数基本类型，而 && 不行。按位与运算符 “&” 是双目运算符。其功能是参与运算的两数各对应的二进位相与。只有对应的两个二进位都为 1 时，结果位才为 1。参与运算的两个数均以补码出现。例如， 0x31 & 0x0f 的结果为 0x01\n（3）&& 叫做短路与，&& 有短路效应，即：当第一个布尔运算为 false，第二个布尔运算不执行。而 & 运算符没有。例如，对于 if (str != null && !str.equals (“”)) 表达式，当 str 为 null 时，后面的表达式不会执行，所以不会出现 NullPointerException。如果将 && 改为 &，则会抛出 NullPointerException 异常。 If (x==33 & ++y>0) y 会增长， If (x==33 && ++y>0) 不会增长\n\n#### 43. ||和|的区别是什么？\n（1）||和|都是表示“或”，区别是||只要满足第一个条件，后面的条件就不再判断（实际也不执行），而|要对所有的条件进行判断。\n（2）“||”: 如果左边计算后的操作数为true,右边则不再执行，返回true；\n（3）“|”：前后两个操作数都会进行计算。也就是说：“|”不存在短路。\n\n#### 44. while和do while有什么区别？\n（1）while，在while中的条件只要满足为true，则一直进行循环。\n（2）do while，无论如何一定先执行一次do，具体可以看如下代码\n```\npublic static void main(String[] args) {\n    boolean flag = false;\n    int i = 0;\n    while(flag){\n        i++;\n    }\n    System.out.println(\"while循环后结果：\"+i);\n    do{\n        i++;\n    } while (flag);\n    System.out.println(\"do while循环后结果：\"+i);\n}\n//输出\nwhile循环后结果：0\ndo while循环后结果：1\n```\n\n#### 45. 如何跳出多重循环？\n（1）普通的跳出循环通常使用break，但是break只能跳出当前循环，如果外层仍然有循环则无法跳出\n（2）如果需要跳出多重循环则可以在指定的某一层循环设定为名字，则在break后边增加制定的名字，即可直接跳出具体某一层的循环，具体代码如下：\n```\npublic static void main(String[] args) {\n    // 为外层循环设定一个名字\n    outer:\n    for (int i = 0; i < 5; i++) {\n        // 内层循环\n        inner:\n        for (int j = 0; j < 3; j++) {\n            System.out.println(\"i的值为:\" + i + \" j的值为:\" + j);\n\n            if (j == 1) {\n            // 跳出outer标签所标识的循环。\n                //break inner;\n                break outer;\n            }\n        }\n    }\n}\n//输出\ni的值为:0 j的值为:0\ni的值为:0 j的值为:1\n//但是如果使用break inner则只能跳出内层循环，外层循环仍然执行，具体输出如下\ni的值为:0 j的值为:0\ni的值为:0 j的值为:1\ni的值为:1 j的值为:0\ni的值为:1 j的值为:1\ni的值为:2 j的值为:0\ni的值为:2 j的值为:1\ni的值为:3 j的值为:0\ni的值为:3 j的值为:1\ni的值为:4 j的值为:0\ni的值为:4 j的值为:1\n\n```\n\n#### 46. int 和 Integer 有哪些区别？\n（1）int和Integer的区别\nInteger是int的包装类；int是基本数据类型,长度为32位（4）字节。\nInteger是Java提供的封装类，在java.lang.Integer包里面。\nInteger变量必须实例化后才能使用；int变量不需要。\nInteger实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值。\nInteger的默认值是null；int的默认值是0\n\n（2）关于Integer和int的深入比较\n由于Integer变量实际上是对一个Integer对象的引用，所以两个通过new生成的Integer变量永远是不相等的（因为new生成的是两个对象，其内存地址不同）。\n```\nInteger i = new Integer(100);\ninteger j = new Integer(100);\nSystem.out.println(i==j);\n//输出\nfalse\n```\nInteger变量和int变量比较时，只要两个变量的值是向等的，则结果为true（因为包装类Integer和基本数据类型int比较时，Java会自动拆包装为int，然后进行比较，实际上就变为两个int变量的比较）\n```\nInteger i = new Integer(100);\nint j = 100;\nSystem.out.ptintln(i == j);\n//输出\ntrue\n```\n非new生成的Integer变量和new Integer()生成的变量比较时，结果为false。（因为 ①当变量值在-128~127之间时，非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同）\n```\nInteger i = new Integer(100);\nInteger j = 100;\nSystem.out.print(i == j);\n//输出\nfalse\n```\n对于两个非new生成的Integer对象，进行比较时，如果两个变量的值在区间-128到127之间，则比较结果为true，如果两个变量的值不在此区间，则比较结果为false。\n```\nInteger i = 100;\nInteger j = 100;\nSystem.out.print(i == j); \n//输出\ntrue\nInteger i = 128;\nInteger j = 128;\nSystem.out.print(i == j); \n//输出\nfalse\n```\n对于上面输出结果的原因：\njava在编译Integer i =100 ;时，会翻译成为Integer i = Integer.valueOf(100);而java API中对Integer类型的valueOf的定义如下：\n```\npublic static Integer valueOf(int i){\n    assert IntegerCache.high >= 127;\n    if (i >= IntegerCache.low && i <= IntegerCache.high){\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    }\n    return new Integer(i);\n}\n```\n从上面我们可以知道给 Interger 赋予的 int 数值在 - 128 - 127 的时候，直接从 cache 中获取，这些 cache 引用对 Integer 对象地址是不变的，但是不在这个范围内的数字，则 new Integer (i) 这个地址是新的地址，不可能一样的.\n\n#### 47. 有了 int 为什么还要有 Integer ？\n（1）因为Java语言是面向对象的，对象封装可以把属性（数据跟处理这些数据的方法）结合在一起。比如Integer就有parseInt()等方法来专门处理int型相关的数据。\n（2）在Java中绝大部分方法或类都是用来处理类类型对象的，如ArrayList和LinkedList集合类就只能以类作为它的存储对象，而这时如果想把一个int型的数据存入list是不可能的，必须把它包装成类，也就是Integer才能被List所接受。\n\n#### 48. Integer 的装箱和拆箱\n（1）自动装箱，将基本数据类型转化为对象\n```\n//等价于Integer num = Integer.valueOf(100);\nInteger i=100;\n```\n（2）自动拆箱，将对象转化为基本数据类型\n```\n//声明一个Integer对象\nInteger i = 100;\n//进行计算时自动拆箱\ni++;\n```\n\n#### 49. String是否是基本数据类型？\n（1）首先说不是基本类型。\n（2）JAVA一共有八种基本数据类型：byte，short，char，int，long，double，float，boolean\n\n#### 50. String aaaStr=\"aaa\" 与 String aaaStr = new String(\"aaa\") 相同么？\n（1）String aaaStr = \"aaa\" 会将字符串aaa分配到常量池中，如果常量池中没有该字符串，则会在常量池中创建一个字符串aaa，然后把地址赋给变量aaaStr；如果存在字符串aaa，则直接将常量池中字符串aaa的地址赋给aaaStr\n（2）String aaaStr = new String(\"aaa\") 会在堆内存中创建一个String对象，并将对象的地址赋给aaaStr，后期如果仍然有String bbbStr = new String(\"aaa\") 及时字符串都是aaa，但是仍然是新创建一个String对象，是分别的两个对象\n\n#### 51. 什么是反射？\n（1）Java中反射是动态获取信息以及动态调用对象方法的一种反射机制。\n（2）Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。而这也是Java被视为动态语言的一个关键性质。\n（3）Java反射的功能是在运行时判断任意一个对象所属的类，在运行时构造任意一个类的对象，在运行时判断任意一个类所具有的成员变量和方法，在运行时调用任意一个对象的方法，生成动态代理。\n（4）Java反射的实现方式\n第一种，使用 Class.forName 静态方法。当你知道该类的全路径名时，你可以使用该方法获取 Class 类对象。\n```\nClass clz = Class.forName(\"com.aaa.Apple\");\nApple apple = (Apple)clz.newInstance();\n```\n第二种，使用 .class 方法。这种方法只适合在编译前就知道操作的 Class。\n```\nClass clz = Apple.class;\nConstructor constructor = clz.getConstructor();\nApple apple = (Apple)constructor.newInstance();\n```\n第三种，使用类对象的 getClass() 方法。\n```\nString str = new String(\"Hello\");\nClass clz = str.getClass();\n```\n\n#### 52. Java 中为什么不允许从静态方法中访问非静态变量？\n（1）静态变量属于类本身，在类加载的时候就会分配内存，可以通过类名直接访问\n（2）非静态变量属于类的对象，只有在类的对象产生时，才会分配内存，通过类的实例去访问\n（3）静态方法也属于类本身，但是此时没有类的实例，内存中没有非静态变量，所以无法调用\n（4）说白了就是静态方法读取非静态变量，很可能不知道当时值是什么，不确定，没有实例化，静态方法也找不到它\n\n#### 53. float 和 double 的区别是什么？\n（1）内存中占有的字节数不同，单精度浮点数float在内存中占有4个字节，双精度浮点数double在内存中占有8个字节\n（2）有效数字位数不同，单精度浮点数有效数字8位，双精度浮点数有效数字16位；\n（3）数值取值范围不同，单精度浮点数的表示范围：-3.40E+38~3.40E+38，双精度浮点数的表示范围：-1.79E+308~-1.79E+308\n（4）在程序中处理速度不同 一般来说，CPU处理单精度浮点数的速度比双精度浮点数的速度快；如果不声明，默认小数是double类型，如果想用float，要进行强转。\n举例float f=1.3；会编译报错，正确的写法是float f = (float)1.3，或者float a = 1.3f，或者float a = 1.3f\n注意 float是八位有效数字，第七位会四舍五入。\n\n#### 54. Java 中 6*0.1 == 0.6 是否为true？\n返回false，因为浮点数不能完全精确的表示，一般会损失一定的精度。下面例子可以看出来6*0.1得到结果是0.6000000000000001，但是5*0.1却没有问题\n```\npublic static void main(String[] args) {\n    System.out.println(6*0.1 == 0.6);\n    System.out.println(6*0.1);\n    System.out.println(0.6);\n    System.out.println(5*0.1 == 0.5);\n    System.out.println(5*0.1);\n    System.out.println(0.5);\n}\n//输出\nfalse\n0.6000000000000001\n0.6\ntrue\n0.5\n0.5\n```\n\n#### 55. 实例化创建对象有几种方式？\n（1）通过 new 对象的方式创建\n`TestBean a = new TestBean();`\n（2）通过 clone() 方法创建\n`TestBean b = a.clone();`\n（3）通过反射机制创建，第51题已经写出了反射的创建例子代码\n```\nClass clz = Class.forName(\"com.aaa.Apple\");\nApple apple = (Apple)clz.newInstance();\n\nClass clz = Apple.class;\nConstructor constructor = clz.getConstructor();\nApple apple = (Apple)constructor.newInstance();\n\nString str = new String(\"Hello\");\nClass clz = str.getClass();\n```\n（4）序列化反序列化\n```\npublic static void main(String[] args) {\n    ObjectInputStream in = ObjectInputStream(new FilelnputStream(\"/data.txt\"));\n    TestBean a = (TestBean) in.readObject();\n    System.out.println(\"反序列化a：\" + a);\n    in.close();\n}\n```\n\n#### 56. @NotEmpty,@NotNull和@NotBlank的区别\n（1）@NotEmpty，不能为null，且Size>0\n（2）@NotNull，不能为null，但可以为empty,没有Size的约束\n（3）@NotBlank，只用于String,不能为null且trim()之后size>0\n\n#### 57. try {}里有一个return语句，那么紧跟在这个try后的finally{}里的code会不会被执行，什么时候被执行，在return前还是后?\n（1）finally{}中的语句是一定会执行的，那么这个可能正常脱口而出就是return之前，return之后可能就出了这个方法了，鬼知道跑哪里去了，但更准确的应该是在return中间执行，请看下面程序代码的运行结果：\n```\npublic class TestMain {\n    public static void main(String[] args) {\n        TestMain test = new TestMain();\n        System.out.println(test.test());\n        ;\n    }\n\n    public int test() {\n        int x = 1;\n        try {\n            System.out.println(\"try method\");\n            return x;\n        } finally {\n            System.out.println(\"finally\");\n            ++x;\n        }\n    }\n}\n//输出\ntry method\nfinally\n1\n```\n（2）运行结果分别按照顺序输出，try内部日志，finally内部日志，最终返回结果1\n（3）为什么呢？主函数调用子函数并得到结果的过程，好比主函数准备一个空罐子，当子函数要返回结果时，先把结果放在罐子里，然后再将程序逻辑返回到主函数。所谓返回，就是子函数说，我不运行了，你主函数继续运行吧，这没什么结果可言，结果是在说这话之前放进罐子里的。\n\n#### 58. 能将 int 强制转换为 byte 类型的变量吗？如果该值大于 byte 类型的范围，将会出现什么现象？\n可以做强制转换，但是 Java 中 int 是 32 位的，而 byte 是 8 位的，但是，如果强制转化，int 类型的高 24 位将会被丢弃，因为byte 类型的范围是从 -128 到 128。\n\n#### 59. 字节流与字符流的区别\n（1）要把一段二进制数据数据逐一输出到某个设备中，或者从某个设备中逐一读取一段二进制数据，不管输入输出设备是什么，我们要用统一的方式来完成这些操作，用一种抽象的方式进行描述，这个抽象描述方式起名为IO流，对应的抽象类为OutputStream和InputStream，不同的实现类就代表不同的输入和输出设备，它们都是针对字节进行操作的。\n（2）计算机中的一切最终都是二进制的字节形式存在。对于经常用到的中文字符，首先要得到其对应的字节，然后将字节写入到输出流。读取时，首先读到的是字节，可是我们要把它显示为字符，我们需要将字节转换成字符。由于这样的需求很广泛，Java专门提供了字符流包装类。\n（3）底层设备永远只接受字节数据，有时候要写字符串到底层设备，需要将字符串转成字节再进行写入。字符流是字节流的包装，字符流则是直接接受字符串，它内部将串转成字节，再写入底层设备，这为我们向IO设备写入或读取字符串提供了一点点方便。\n（4）字符向字节转换时，要注意编码的问题，因为字符串转成字节数组，其实是转成该字符的某种编码的字节形式，读取也是反之的道理。\n\n#### 60. 什么是java序列化，如何实现java序列化？或者请解释Serializable接口的作用。\n（1）将一个java对象变成字节流的形式传出去或者从一个字节流中恢复成一个java对象，例如，要将java对象存储到硬盘或者传送给网络上的其他计算机，这个过程我们可以自己写代码去把一个java对象变成某个格式的字节流再传输。\n（2）jre本身就提供了这种支持，我们可以调用OutputStream的writeObject方法来做，如果要让java帮我们做，要被传输的对象必须实现serializable接口，这样，javac编译时就会进行特殊处理，编译的类才可以被writeObject方法操作，这就是所谓的序列化。需要被序列化的类必须实现Serializable接口，该接口是一个mini接口，其中没有需要实现方法，implements Serializable只是为了标注该对象是可被序列化的。\n（3）在web开发中，如果对象被保存在了Session中，tomcat在重启时要把Session对象序列化到硬盘，这个对象就必须实现Serializable接口。如果对象要经过分布式系统进行网络传输，被传输的对象就必须实现Serializable接口。\n\n#### 61. switch语句能否作用在byte上，能否作用在long上，能否作用在String上?\n（1）在switch（e）中，e只能是一个整数表达式或者枚举常量，整数表达式可以是int基本类型或Integer包装类型，由于byte,short,char都可以隐含转换为int，所以，这些类型以及这些类型的包装类型也是可以的。\n（2）jdk1.7之后加入String，通过hashCode转化为int，所以可以适用于switch语句中。\n（3）long类型都不符合switch的语法规定，并且不能被隐式转换成int类型，所以，它们不能作用于swtich语句中。\n\n#### 62. 使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？\n（1）使用final关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的。例如，对于如下语句：\n```\nfinalStringBuffer a=new StringBuffer(\"immutable\");\n//执行如下语句将报告编译期错误：\na=new StringBuffer(\"\");\n//但是，执行如下语句则可以通过编译：\na.append(\" broken!\");\n```\n（2）有人在定义方法的参数时，可能想采用如下形式来阻止方法内部修改传进来的参数对象\n```\npublic void method(final StringBuffer param){\n}\n```\n（3）在该方法内部仍然可以增加如下代码来修改参数对象\n```\nparam.append(\"a\");\n```\n\n#### 63. 是否可以从一个static方法内部发出对非static方法的调用？\n可以，可以通过在内部对非static方法的类实例化后，在调用即可，代码如下\n```\npublic class TestController {\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 5; i++) {\n            TestController.ttt();\n        }\n    }\n    public static void ttt() {\n        TestController a = new TestController();\n        System.out.println(a);\n        a.test();\n    }\n\n    public void test(){\n        System.out.println(\"1111\");\n    }\n}\n//输出\ncom.buxuesong.account.api.controller.TestController@2530c12\n1111\ncom.buxuesong.account.api.controller.TestController@73c6c3b2\n1111\ncom.buxuesong.account.api.controller.TestController@48533e64\n1111\ncom.buxuesong.account.api.controller.TestController@64a294a6\n1111\ncom.buxuesong.account.api.controller.TestController@7e0b37bc\n1111\n```","slug":"MyBlog","published":1,"updated":"2023-07-05T02:26:03.408Z","_id":"clgkfpskm0000xowdb9olcx90","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"可以扫描下面二维码访问我的小程序来打开，随时随地通过微信访问。\"><a href=\"#可以扫描下面二维码访问我的小程序来打开，随时随地通过微信访问。\" class=\"headerlink\" title=\"可以扫描下面二维码访问我的小程序来打开，随时随地通过微信访问。\"></a>可以扫描下面二维码访问我的小程序来打开，随时随地通过微信访问。</h4><h5 id=\"这个是一些Java基础知识常见面试题，以及答案，我会逐个写出答案，实际上也是我学习的过程，一步一步来吧。\"><a href=\"#这个是一些Java基础知识常见面试题，以及答案，我会逐个写出答案，实际上也是我学习的过程，一步一步来吧。\" class=\"headerlink\" title=\"这个是一些Java基础知识常见面试题，以及答案，我会逐个写出答案，实际上也是我学习的过程，一步一步来吧。\"></a>这个是一些Java基础知识常见面试题，以及答案，我会逐个写出答案，实际上也是我学习的过程，一步一步来吧。</h5><h4 id=\"1-java中-x3D-x3D-和equals和hashCode的区别\"><a href=\"#1-java中-x3D-x3D-和equals和hashCode的区别\" class=\"headerlink\" title=\"1. java中&#x3D;&#x3D;和equals和hashCode的区别\"></a>1. java中&#x3D;&#x3D;和equals和hashCode的区别</h4><p>（1）&#x3D;&#x3D;如果作用于基本数据类型的变量（byte,short,char,int,long,float,double,boolean ），则直接比较其存储的”值”是否相等；如果作用于引用类型的变量（String），则比较的是所指向的对象的地址（即是否指向同一个对象）。<br>（2）equal如果直接使用Object继承的方法则和&#x3D;&#x3D;相同，但是如果equal重写的比较方法，自定义后就按照equal后的定义比较了<br>（3）hashCode是将bean实体转换为哈希编码的方法 </p>\n<h4 id=\"2-int与integer的区别\"><a href=\"#2-int与integer的区别\" class=\"headerlink\" title=\"2. int与integer的区别\"></a>2. int与integer的区别</h4><p> int 是java的基本类型，非null，初始值0，Integer是int的封装类型，可为null，以及一些方法，max，min等 </p>\n<span id=\"more\"></span>\n\n<h4 id=\"3-抽象类的意义\"><a href=\"#3-抽象类的意义\" class=\"headerlink\" title=\"3. 抽象类的意义\"></a>3. 抽象类的意义</h4><p>无法实例化，没有足够的信息来描述一个对象，实际是对某类对象的抽象出来的一些共有的定义以及方法。为公共的对象的非抽象方法提供了通用的定义，方便子类的使用。也可以定义抽象方法，不能有方法体，这种方法子类必须重写（这个实际和接口是一样的，如果子类也是抽象类可以不重写）</p>\n<h4 id=\"4-接口和抽象类的区别\"><a href=\"#4-接口和抽象类的区别\" class=\"headerlink\" title=\"4. 接口和抽象类的区别\"></a>4. 接口和抽象类的区别</h4><p>一个类可以实现多个接口，但是一个类只能有一个抽象类的父类，接口所有方法都是抽象方法，必须由实现类实现这些抽象方法，而抽象类可以有非抽象方法，抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 public static final 类型的， 接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。</p>\n<h4 id=\"5-能否创建一个包含可变对象的不可变对象\"><a href=\"#5-能否创建一个包含可变对象的不可变对象\" class=\"headerlink\" title=\"5. 能否创建一个包含可变对象的不可变对象?\"></a>5. 能否创建一个包含可变对象的不可变对象?</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestNotChanged &#123;</span><br><span class=\"line\">    public static final TestDto testDto = new TestDto();</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        testDto.setCommParam(CommParam.builder().paramValue(&quot;1111&quot;).build());</span><br><span class=\"line\">        System.out.println(testDto.getCommParam());</span><br><span class=\"line\">        testDto.setCommParam(CommParam.builder().paramValue(&quot;2222&quot;).build());</span><br><span class=\"line\">        System.out.println(testDto.getCommParam());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">CommParam&#123;paramKey=&#x27;null&#x27;, paramValue=&#x27;1111&#x27;&#125;</span><br><span class=\"line\">CommParam&#123;paramKey=&#x27;null&#x27;, paramValue=&#x27;2222&#x27;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-谈谈对java多态的理解\"><a href=\"#6-谈谈对java多态的理解\" class=\"headerlink\" title=\"6. 谈谈对java多态的理解\"></a>6. 谈谈对java多态的理解</h4><p>继承父类，重写父类的方法，Parent parent &#x3D; new Child();这时在执行父类与子类都有的方法，实际会调用子类的方法。</p>\n<h4 id=\"7-String、StringBuffer、StringBuilder区别\"><a href=\"#7-String、StringBuffer、StringBuilder区别\" class=\"headerlink\" title=\"7. String、StringBuffer、StringBuilder区别\"></a>7. String、StringBuffer、StringBuilder区别</h4><p>String 字符串常量、StringBuffer 字符串变量（线程安全，所有方法都是synchronized）、StringBuilder 字符串变量（非线程安全，效率高，没有synchronized）</p>\n<h4 id=\"8-泛型中extends和super的区别\"><a href=\"#8-泛型中extends和super的区别\" class=\"headerlink\" title=\"8. 泛型中extends和super的区别\"></a>8. 泛型中extends和super的区别</h4><p>extends表示泛型的上限（表示必须是该类型或者该类型的子类），super表示泛型的下限（表示必须是该类型或者该类型的父类）</p>\n<h4 id=\"9-进程和线程的区别\"><a href=\"#9-进程和线程的区别\" class=\"headerlink\" title=\"9. 进程和线程的区别\"></a>9. 进程和线程的区别</h4><p>进程cpu执行任务的一段任务，而线程是这个任务在cpu上执行的具体操作。</p>\n<h4 id=\"10-序列化的方式\"><a href=\"#10-序列化的方式\" class=\"headerlink\" title=\"10. 序列化的方式\"></a>10. 序列化的方式</h4><p>1&gt;对象实现了序列化接口Serializable<br>2&gt;实现接口Externalizable,实现writeExternal和readExternal方法</p>\n<h4 id=\"11-string-转换成-integer的方式及原理\"><a href=\"#11-string-转换成-integer的方式及原理\" class=\"headerlink\" title=\"11. string 转换成 integer的方式及原理\"></a>11. string 转换成 integer的方式及原理</h4><p>第一位可以是符号位（正负），正负值会在最后一步取正反。从左到右按位取值，例如325，第一位为3，则循环取，取出3，将3变为-3放到result中（个人认为这个是避免从正数超过int的最大值溢出），再取第二位2，这时需要先将result<em>进制（一般为10进制），变为-30，之后-30减去2得到result为-32，再取第三位5，先将result</em>进制，result变为-320，之后-320减去5得到-325，循环完毕，这个值是正数，所以需要取反，得到325.</p>\n<h4 id=\"12-静态属性和静态方法是否可以被继承？是否可以被重写？以及原因？\"><a href=\"#12-静态属性和静态方法是否可以被继承？是否可以被重写？以及原因？\" class=\"headerlink\" title=\"12. 静态属性和静态方法是否可以被继承？是否可以被重写？以及原因？\"></a>12. 静态属性和静态方法是否可以被继承？是否可以被重写？以及原因？</h4><p>可以被子类继承使用，但是重写后不生效，因为static方法以及属性都是全局的，需要通过具体class名称来使用，即使方法名或者属性名相同，父类的静态方法只能是父类后边带方法，子类的静态方法只能是子类后边带方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Parent &#123;</span><br><span class=\"line\">    public static String aaa = &quot;aaa&quot;;</span><br><span class=\"line\">    public static String testMethod() &#123;</span><br><span class=\"line\">        return aaa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Child extends Parent &#123;</span><br><span class=\"line\">    public static String aaa = &quot;aaaa&quot;;</span><br><span class=\"line\">    public static String testMethod() &#123;</span><br><span class=\"line\">        return aaa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Parent a = new Child();</span><br><span class=\"line\">        System.out.println(a.aaa);</span><br><span class=\"line\">        Child b = new Child();</span><br><span class=\"line\">        System.out.println(b.aaa);</span><br><span class=\"line\">        System.out.println(Parent.testMethod());</span><br><span class=\"line\">        System.out.println(Child.testMethod());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">aaa</span><br><span class=\"line\">aaaa</span><br><span class=\"line\">aaa</span><br><span class=\"line\">aaaa</span><br></pre></td></tr></table></figure>\n<h4 id=\"13-成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及项目中的应用\"><a href=\"#13-成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及项目中的应用\" class=\"headerlink\" title=\"13. 成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及项目中的应用\"></a>13. 成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及项目中的应用</h4><p>成员内部类:定义在类内部的非静态类;<br>静态内部类:定义在类内部的静态类;<br>局部内部类:定义在方法中的类（只在某个方法中使用）;<br>匿名内部类:没有访问修饰符的直接通过new出来的内部类（例如事件监听的回调方法）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//匿名内部类</span><br><span class=\"line\">public void test() &#123;</span><br><span class=\"line\">        Object obj = new Object() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public String toString() &#123;</span><br><span class=\"line\">                System.out.println(b);</span><br><span class=\"line\">                return String.valueOf(a);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(obj.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"14-讲一下常见编码方式？\"><a href=\"#14-讲一下常见编码方式？\" class=\"headerlink\" title=\"14. 讲一下常见编码方式？\"></a>14. 讲一下常见编码方式？</h4><p>ASCII，ISO-8859-1、GBK&#x2F;GB2312&#x2F;UTF-16(双字节)&#x2F;UTF-8（变长，开头是0表示ASCII，开始是11表示首字节，开始时10表示非首字节，前一个才是首字节）<br>如何格式化日期?</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date FormatDate = new SimpleDateFormat(&quot;YYYY-MM-DD&quot;).parse(&quot;2020-01-01&quot;)</span><br><span class=\"line\">LocalDateTime.now(ZoneId.of(&quot;Asia/Shanghai&quot;)).format(DateTimeFormatter.ofPattern(&quot;YYYY-MM-DD&quot;))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"15-Java的异常体系\"><a href=\"#15-Java的异常体系\" class=\"headerlink\" title=\"15. Java的异常体系\"></a>15. Java的异常体系</h4><h4 id=\"16-什么是异常链\"><a href=\"#16-什么是异常链\" class=\"headerlink\" title=\"16. 什么是异常链\"></a>16. 什么是异常链</h4><p>不会覆盖原有的异常信息，将之前throw出来的异常加入到新的异常中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 异常链写法1</span><br><span class=\"line\">Exception e2 = new Exception(&quot;第2个异常&quot;);</span><br><span class=\"line\">e2.initCause(e); // 异常链信息的传递</span><br><span class=\"line\">throw e2;</span><br><span class=\"line\">// 异常链写法2</span><br><span class=\"line\">// throw new Exception(&quot;第2个异常&quot;, e);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"17-throw和throws的区别\"><a href=\"#17-throw和throws的区别\" class=\"headerlink\" title=\"17. throw和throws的区别\"></a>17. throw和throws的区别</h4><p>throw表示创建新的异常并扔出来，而throws表示方法定义的末尾，将内部可能throw出来的异常直接在方法级抛出</p>\n<h4 id=\"18-反射的原理，反射创建类实例的三种方式是什么。\"><a href=\"#18-反射的原理，反射创建类实例的三种方式是什么。\" class=\"headerlink\" title=\"18. 反射的原理，反射创建类实例的三种方式是什么。\"></a>18. 反射的原理，反射创建类实例的三种方式是什么。</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//第一种，使用 Class.forName 静态方法。当你知道该类的全路径名时，你可以使用该方法获取 Class 类对象。</span><br><span class=\"line\">Class clz = Class.forName(&quot;com.aaa.Apple&quot;);</span><br><span class=\"line\">Apple apple = (Apple)clz.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">// 第二种，使用 .class 方法。</span><br><span class=\"line\">//这种方法只适合在编译前就知道操作的 Class。</span><br><span class=\"line\">Class clz = Apple.class;</span><br><span class=\"line\">Constructor constructor = clz.getConstructor();</span><br><span class=\"line\">Apple apple = (Apple)constructor.newInstance();</span><br><span class=\"line\">//第三种，使用类对象的 getClass() 方法。</span><br><span class=\"line\">String str = new String(&quot;Hello&quot;);</span><br><span class=\"line\">Class clz = str.getClass();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"19-java当中的四种引用\"><a href=\"#19-java当中的四种引用\" class=\"headerlink\" title=\"19. java当中的四种引用\"></a>19. java当中的四种引用</h4><p>强引用：直接通过&#x3D;赋值，内存不够也不会被回收，常见用法；<br>软引用：SoftReference<?>来表示，内存不足时会回收软引用，写完下面代码才理解，实际上这个是定义了一个引用，指向了里面的地址，实际上即使里面的变量设定为null了，引用还在，但是当内存不足时候回收掉，软引用就无法get到值了，变为null了，另外注意一定是new String出来，而不是直接写=\"123\",这样写多少都是一个地址，无法回收，但是实际上这个没有回收成功，软引用的场景是缓存，图片缓存等；\n弱引用：WeakReference<?>来表示，和软引用的写法类似，但是只要内存回收，弱引用就会被回收，下面的回收成功了，WeakHashMap，可以被回收的key值（HashMap的key值在删除前在不能被回收），而这种WeakHashMap的key在内存不足时可以被回收，使用前需要判断是否存在；<br>虚引用（PhantomReference） ，只能通过 ReferenceQueue 引用队列一起使用，创建时放入queue中，使用时通过queue的poll取出来，但是随时可能会被回收。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。实际这个就是看何时发生回收的一个监控，目前没有其他的使用场景。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//弱引用</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        String a = new String(&quot;1111&quot;);</span><br><span class=\"line\">        WeakReference&lt;String&gt; list =new WeakReference(a);</span><br><span class=\"line\">        a = null;</span><br><span class=\"line\">        while(true) &#123;</span><br><span class=\"line\">            System.out.println(list.get());</span><br><span class=\"line\">            System.out.println(&quot;-----&quot;);</span><br><span class=\"line\">            System.gc();</span><br><span class=\"line\">            System.out.println(list.get());</span><br><span class=\"line\">            System.out.println(&quot;==========================================================================&quot;);</span><br><span class=\"line\">            if(list.get() == null)&#123;</span><br><span class=\"line\">                System.out.println(&quot;BREAKBREAKBREAKBREAK&quot;);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">[GC (Allocation Failure)  1023K-&gt;708K(5632K), 0.0011759 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  1732K-&gt;1034K(5632K), 0.0010715 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  2056K-&gt;1224K(5632K), 0.0008859 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  2247K-&gt;1460K(5632K), 0.0009643 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  2484K-&gt;1577K(5632K), 0.0009887 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  2586K-&gt;1703K(5632K), 0.0015657 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  2727K-&gt;1855K(5632K), 0.0017342 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  2879K-&gt;2183K(5632K), 0.0010898 secs]</span><br><span class=\"line\">1111</span><br><span class=\"line\">-----</span><br><span class=\"line\">[GC (System.gc())  2990K-&gt;2264K(5632K), 0.0009776 secs]</span><br><span class=\"line\">[Full GC (System.gc())  2264K-&gt;1588K(5632K), 0.0179253 secs]</span><br><span class=\"line\">null</span><br><span class=\"line\">==========================================================================</span><br><span class=\"line\">BREAKBREAKBREAKBREAK</span><br><span class=\"line\">//虚引用</span><br><span class=\"line\">        String status = new String(&quot;123&quot;);</span><br><span class=\"line\">        ReferenceQueue&lt;String&gt; queue = new ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">        PhantomReference&lt;String&gt; test = new PhantomReference&lt;String&gt;(status, queue);</span><br><span class=\"line\">        status = null;</span><br><span class=\"line\">        System.out.println(queue.poll());</span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\">        Thread.sleep(2000L);</span><br><span class=\"line\">        System.out.println(queue.poll());</span><br><span class=\"line\">//输出</span><br><span class=\"line\">null</span><br><span class=\"line\">java.lang.ref.PhantomReference@58372a00</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"20-深拷贝和浅拷贝的区别是什么\"><a href=\"#20-深拷贝和浅拷贝的区别是什么\" class=\"headerlink\" title=\"20. 深拷贝和浅拷贝的区别是什么?\"></a>20. 深拷贝和浅拷贝的区别是什么?</h4><p>这里考点是对基本类型和引用类型的理解，基本类型浅拷贝和深拷贝没什么区别，都是copy出一份到新的内存地址，但是引用类型就不一样了，如果是浅拷贝，一些引用变量还是指向之前的地址，这就导致了修改了拷贝前的Bean的某个值，则另外一个Bean的该变量也会变化，因为内存地址是一样的，因此需要重写clone方法，将该变量copy一份到新内存地址，这样修改任何一个都不互相影响。</p>\n<h4 id=\"21-什么是编译器常量？使用它有什么风险？\"><a href=\"#21-什么是编译器常量？使用它有什么风险？\" class=\"headerlink\" title=\"21. 什么是编译器常量？使用它有什么风险？\"></a>21. 什么是编译器常量？使用它有什么风险？</h4><p>这里考点是对编译器（期）常量和运行时常量的理解</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//编译期常量</span><br><span class=\"line\">public static final String TEST = &quot;TEST&quot;;</span><br><span class=\"line\">//运行时常量</span><br><span class=\"line\">public static final double TEST_DOUBLE = Math.random();</span><br></pre></td></tr></table></figure>\n<p>编译期常量实际上是在编译的时候初始化的变量，而运行时常量只有在运行时候才会初始化，编译时不知道是什么值。<br>在咱们大型项目中，会有增量打升级包的情况，此时如果A类引用了其B类的一个编译期常量（A类本次没有编译，B类的常量值修改后编译），那么上线后，会发现A类引用的编译期常量还是之前的值，会导致bug的产生，因此一定要注意一起编译。这个其实引入了JVM的知识点，A类引用了B累的编译期常量，实际会在编译时写死在A类中，也就是即使B类编译变化了也不影响A类的引用。</p>\n<h4 id=\"22-你对String对象的intern-熟悉么\"><a href=\"#22-你对String对象的intern-熟悉么\" class=\"headerlink\" title=\"22. 你对String对象的intern()熟悉么?\"></a>22. 你对String对象的intern()熟悉么?</h4><p>intern实际上是在常量池里寻找与其相等的String，并把地址返回过来，具体可以看下面的，s1和s4通过+实际上是不同的String，但是由于字符串实际相同，因此intern()也是相同的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = &quot;abc&quot;;</span><br><span class=\"line\">String s2 = &quot;a&quot;;</span><br><span class=\"line\">String s3 = &quot;bc&quot;;</span><br><span class=\"line\">String s4 = s2 + s3;</span><br><span class=\"line\">System.out.println(s1 == s4);</span><br><span class=\"line\">System.out.println(s1.intern() == s4.intern());</span><br></pre></td></tr></table></figure>\n<h4 id=\"23-a-x3D-a-b与a-x3D-b有什么区别吗\"><a href=\"#23-a-x3D-a-b与a-x3D-b有什么区别吗\" class=\"headerlink\" title=\"23. a&#x3D;a+b与a+&#x3D;b有什么区别吗?\"></a>23. a&#x3D;a+b与a+&#x3D;b有什么区别吗?</h4><p>其实你注意下，他把类型去掉了？为什么呢？<br>这就是问题所在，隐去类型就是题目关心的，因为实际上如果类型一致，那么就不会有问题这两个操作是一致的，但是如果类型不一致，那么+&#x3D;就会多出来一步类型转换。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte a=1;</span><br><span class=\"line\">//a+=4;这个和下面实际上是相等的操作</span><br><span class=\"line\">   a = (byte)(a+4);</span><br><span class=\"line\">   //但是如果这么写编译期会报错，认为a+4转换为了int，但是实际上a是byte，两个类型不符合了</span><br><span class=\"line\">   a = a+4;</span><br></pre></td></tr></table></figure>\n<h4 id=\"24-静态代理和动态代理的区别，什么场景使用？\"><a href=\"#24-静态代理和动态代理的区别，什么场景使用？\" class=\"headerlink\" title=\"24. 静态代理和动态代理的区别，什么场景使用？\"></a>24. 静态代理和动态代理的区别，什么场景使用？</h4><p>这个有点长，我写了个帖子：<br><a href=\"https://segmentfault.com/a/1190000040962971\">https://segmentfault.com/a/1190000040962971</a></p>\n<h4 id=\"25-如何将一个Java对象序列化到文件里？\"><a href=\"#25-如何将一个Java对象序列化到文件里？\" class=\"headerlink\" title=\"25. 如何将一个Java对象序列化到文件里？\"></a>25. 如何将一个Java对象序列化到文件里？</h4><p>可以查看我的另一个帖子：<br><a href=\"https://segmentfault.com/a/1190000040941021\">https://segmentfault.com/a/1190000040941021</a></p>\n<h4 id=\"26-说说你对Java反射的理解\"><a href=\"#26-说说你对Java反射的理解\" class=\"headerlink\" title=\"26. 说说你对Java反射的理解\"></a>26. 说说你对Java反射的理解</h4><p>可以查看我的另一个帖子：<br><a href=\"https://segmentfault.com/a/1190000040913240\">https://segmentfault.com/a/1190000040913240</a></p>\n<h4 id=\"27-说说你对Java注解的理解\"><a href=\"#27-说说你对Java注解的理解\" class=\"headerlink\" title=\"27. 说说你对Java注解的理解\"></a>27. 说说你对Java注解的理解</h4><p>可以查看我的另一个帖子：<br><a href=\"https://segmentfault.com/a/1190000040957885\">https://segmentfault.com/a/1190000040957885</a></p>\n<h4 id=\"28-说说你对依赖注入的理解\"><a href=\"#28-说说你对依赖注入的理解\" class=\"headerlink\" title=\"28. 说说你对依赖注入的理解\"></a>28. 说说你对依赖注入的理解</h4><p>在没有Spring或者在纯java的代码中，都是自己去new出来的对象，这样会导致很多代码中包含了大量的new，set各种代码<br>例如如果我需要数据库操作先创建Connection连接等一系列操作，很繁琐<br>出现了Spring以后，Spring容器把这些操作集合了，也就是咱们BeanA需要BeanB的时候，不需要再去new操作了，Spring容器帮助咱们把BeanB创建好了<br>BeanA想要使用BeanB直接拿来就可以用了(Spring容器帮助把BeanB注入到BeanA中了，BeanA依赖的BeanB就这样被注入进来了)，这种操作就是依赖注入了。<br>其实很多人还说有Ioc控制反转，个人理解就是以前需要BeanB就new出来就好了，现在容器把创建BeanB的过程拿走了，创建BeanB的过程被容器控制了。<br>DI依赖注入，实际就是BeanA依赖的BeanB被容器帮助下，容器把BeanB注入到了BeanA中。</p>\n<h4 id=\"29-说一下泛型原理，并举例说明\"><a href=\"#29-说一下泛型原理，并举例说明\" class=\"headerlink\" title=\"29. 说一下泛型原理，并举例说明\"></a>29. 说一下泛型原理，并举例说明</h4><p>实际上java的泛型是个伪泛型，使用起来很方便，免去手写转型操作了。<br>具体原理时编译器在编译前会检测你针对List<String>这种定义的集合中存入内容时候，会去检测你传入的类型是否符合类型，如果不符合就给你提示类型传入的不对。<br>另外看源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    list.add(&quot;Sfsdf&quot;);</span><br><span class=\"line\">    String result = list.get(0);</span><br><span class=\"line\">    System.out.println(result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>反编译后源码的，发现了什么，list取出来之后增加一个String转型，这个就是伪泛型了，实际上泛型编译成class时候，会帮助咱们进行转型操作，而不像C中的泛型，独立的类型，不需要转型操作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  List&lt;String&gt; list = new ArrayList();</span><br><span class=\"line\">  list.add(&quot;Sfsdf&quot;);</span><br><span class=\"line\">  String result = (String)list.get(0);</span><br><span class=\"line\">  System.out.println(result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更多的可以查看我的另一个帖子：<br><a href=\"https://segmentfault.com/a/1190000040835933\">https://segmentfault.com/a/1190000040835933</a></p>\n<h4 id=\"30-Java中String的了解\"><a href=\"#30-Java中String的了解\" class=\"headerlink\" title=\"30. Java中String的了解\"></a>30. Java中String的了解</h4><p>String类其实是通过char数组来保存字符串的<br>String类是final类，也即意味着String类不能被继承，并且它的成员方法都默认为final方法<br>String对象一旦被创建就是固定不变的了，对String对象的任何改变都不影响到原对象，相关的任何change操作都会生成新的对象<br>有两种创建方式直接通过””（这种方式直接使用常量池的常量）创建以及new String(“”)（这种方式，会将对象存储到堆中）的方式<br>String str3&#x3D;str1+str2这个操作实际触发了StringBuilder的append方法以及toString方法。<br>但是String str4&#x3D;”abc”+”def”;这种情况下，abc和def都在常量池内，因此拼接时候直接在常量池内拼接，生成的abcdef还在常量池中<br>String.intern()会直接从常量池里找到<br>String是不可变字符串对象，StringBuilder和StringBuffer是可变字符串对象（其内部的字符数组长度可变）<br>String中的对象是不可变的，也就可以理解为常量，显然线程安全。StringBuffer 与 StringBuilder中的方法和功能完全是等价的，只是StringBuffer 中的方法大都采用了synchronized关键字进行修饰，因此是线程安全的，而StringBuilder没有这个修饰，可以被认为是非线程安全的。</p>\n<h4 id=\"31-String为什么要设计成不可变的？\"><a href=\"#31-String为什么要设计成不可变的？\" class=\"headerlink\" title=\"31. String为什么要设计成不可变的？\"></a>31. String为什么要设计成不可变的？</h4><p>如果设计成StringBuilder这种，作为key放在HashSet中，StringBuilder是可变的，如果分别放入了两个不同值的StringBuilder sb1和sb2，放入了后期修改了sb2的值和sb1的值相同，就会违反了HashSet的key值唯一性，另外在大量使用字符串，很多重复的字符串情况下，也是节省了很多存储空间，关键是它不可变所以也不会出现问题。</p>\n<h4 id=\"32-Object类的equal和hashCode方法重写，为什么？\"><a href=\"#32-Object类的equal和hashCode方法重写，为什么？\" class=\"headerlink\" title=\"32. Object类的equal和hashCode方法重写，为什么？\"></a>32. Object类的equal和hashCode方法重写，为什么？</h4><p>首先equal直接使用Object的话，是和&#x3D;&#x3D;表示了相同的意思，因此如果有一些复杂的Bean需要特殊的比较时候，就需要重启equal了。比如修改了eqaul方法，某些情况下表示相同了，如果不重写hashCode时候，再存入HashSet或者HashMap的做为key的时候，可能不相同，这样就会表达出不同的意思。<br>另外java还有个规定：hashcode()不等，一定能推出equals()也不等；hashcode()相等，equals()可能相等，也可能不等。</p>\n<h4 id=\"33-Java中实现多态的机制是什么？\"><a href=\"#33-Java中实现多态的机制是什么？\" class=\"headerlink\" title=\"33. Java中实现多态的机制是什么？\"></a>33. Java中实现多态的机制是什么？</h4><p>Java实现多态有三个必要条件：继承、重写、向上转型。<br>继承：在多态中必须存在有继承关系的子类和父类。<br>重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。<br>向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。<br>只有满足了上述三个条件，我们才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象，从而达到执行不同的行为。<br>重载(overload)和重写(override)<br>如果一个子类继承了一个父类，子类中拥有和父类相同方法名称，返回值，参数类型的话，就是重写，会执行子类中的方法。<br>如果一个类中定义了多个同名方法，他们有不同的参数类型或者参数数量或者返回值类型，那就叫重载<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;以下内容2022.08.14新增&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>\n<h4 id=\"34-面向对象编程的特征有哪些？\"><a href=\"#34-面向对象编程的特征有哪些？\" class=\"headerlink\" title=\"34. 面向对象编程的特征有哪些？\"></a>34. 面向对象编程的特征有哪些？</h4><p>（1）封装 (Encapsulation)，是指隐藏对象的属性和具体如何实现操作，控制成员属性的访问以及修改权限，只能通过专用的public方法来访问获取。具体如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private String test = &quot;测试封装&quot;;</span><br><span class=\"line\">public String getTest()&#123;</span><br><span class=\"line\">return this.name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）继承 (Inheritance)，就是指子类继承父类，使得库子类也能具有父类相同的行为。<br>（3）多态 (Polymorphism)是指同一个行为具有多个不同的表现形式或形态，如一个类的方法在不同的参数情况有不同表现形式。</p>\n<h4 id=\"35-i-和-i的区别\"><a href=\"#35-i-和-i的区别\" class=\"headerlink\" title=\"35. i++和++i的区别\"></a>35. i++和++i的区别</h4><p>（1）i++是先使用当前i值使用，再对i进行自身+1操作。<br>（2）++i则相反，现对自身+1操作，再使用+1后的结果操作。</p>\n<h4 id=\"36-JDK和JRE的区别\"><a href=\"#36-JDK和JRE的区别\" class=\"headerlink\" title=\"36. JDK和JRE的区别\"></a>36. JDK和JRE的区别</h4><p>（1）JRE，Java Runtime Environment（java运行时环境）。即java程序的运行时环境，包含了java虚拟机，java基础类库。<br>（2）JDK，Java Development Kit（java开发工具包）。即java语言编写的程序所需的开发工具包。<br>（3）JDK包含了JRE，同时还包括java源码的编译器javac、监控工具jconsole、分析工具jvisualvm等。</p>\n<h4 id=\"37-JAVA的关键字有哪些？\"><a href=\"#37-JAVA的关键字有哪些？\" class=\"headerlink\" title=\"37. JAVA的关键字有哪些？\"></a>37. JAVA的关键字有哪些？</h4><p>（1）48个关键字：abstract、assert、boolean、break、byte、case、catch、char、class、continue、default、do、double、else、enum、extends、final、finally、float、for、if、implements、import、int、interface、instanceof、long、native、new、package、private、protected、public、return、short、static、strictfp、super、switch、synchronized、this、throw、throws、transient、try、void、volatile、while。<br>（2）2个保留字（现在没用以后可能用到作为关键字）：goto、const。<br>（3）3个特殊直接变量：true、false、null。</p>\n<h4 id=\"38-java中常量是什么？\"><a href=\"#38-java中常量是什么？\" class=\"headerlink\" title=\"38. java中常量是什么？\"></a>38. java中常量是什么？</h4><p>常量就是不变的数据量, 在程序执行的过程中其值不可以发生改变。<br>如下所示就是常量的一种</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final static String NAME = &quot;AAAABBBB&quot;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"39-java中常量有哪些类型？\"><a href=\"#39-java中常量有哪些类型？\" class=\"headerlink\" title=\"39. java中常量有哪些类型？\"></a>39. java中常量有哪些类型？</h4><p>（1）整数常量<br>整型常量是整数类型的数据，有二进制、八进制、十进制和十六进制4种表示形式具体表示形式如下。<br>十进制表示方式：正常数字。 如 13、25等<br>二进制表示方式：以 0b(0B) 开头。 如0b1011 、0B1001<br>十六进制表示方式：以 0x(0X) 开头。 数字以0-9及A-F组成 如0x23A2、0xa、0x10<br>八进制表示方式：以 0 开头。 如01、07、0721<br>（2）浮点数常量，浮点数常量就是在数学中用到的小数，也叫小数类型，分为foat单精度浮点数和double双精度浮点数两种类型。如1.0、-3.15、3.168等<br>（3）字符常量，字符常量用于表示一个字符，一个字符常量要用一对英文半角格式的单引’’号引起来，它可以是英文字母、数字、标点符号以及由转义序列来表示的特殊字符。如 ‘a’，’A’, ‘0’, ‘家’。<br>（4）字符串常量，字符串常量用于表示一串连续的字符，一个字符串常量要用一对英文半角格式的双引号””引起来，如 “我爱Java”，”0123”，””，”null”。<br>（5）布尔型常量值，Java 的布尔型常量只有两个值，即 false（假）和 true（真）。<br>（6）null常量，null常量只有一个值null，表示对象的引用为空。</p>\n<h4 id=\"40-public、private、protected以及默认的区别\"><a href=\"#40-public、private、protected以及默认的区别\" class=\"headerlink\" title=\"40. public、private、protected以及默认的区别\"></a>40. public、private、protected以及默认的区别</h4><p>（1）public，表示紧跟其后的成员可以被任何人引用<br>（2）private，表示紧跟其后的成员除了类型创建者和类型内部的方法，任何人都不可引用，否者程序编译报错<br>（3）protected，与private效果相当，差别仅在于继承的类可以访问protected成员<br>（4）默认访问权限（即定义属性时不加任何关键字修饰），默认访问权限通常被称为“包访问权限”，在这种权限下的成员变量可被同一个包中的其他类访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.buxuesong;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestBean &#123;</span><br><span class=\"line\">    public int publicParam;</span><br><span class=\"line\">    String defaultParam;</span><br><span class=\"line\">    protected String protectedParam;</span><br><span class=\"line\">    private String privateParam;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">package com.buxuesong;</span><br><span class=\"line\"></span><br><span class=\"line\">public class ChildTestBean extends TestBean &#123;</span><br><span class=\"line\">    public void setBean() &#123;</span><br><span class=\"line\">        TestBean testBean = new TestBean();</span><br><span class=\"line\">        //public修饰成员可被任何人访问</span><br><span class=\"line\">        testBean.publicParam = 12;</span><br><span class=\"line\">        //同一个包中的类可访问默认权限成员</span><br><span class=\"line\">        testBean.defaultParam = &quot;Bob&quot;;</span><br><span class=\"line\">        //继承的类可访问protected成员</span><br><span class=\"line\">        testBean.protectedParam = &quot;UK&quot;;</span><br><span class=\"line\">        //ERROR 继承的类无法访问private成员</span><br><span class=\"line\">        testBean.privateParam = &quot;man&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">package com.buxuesong.test;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.buxuesong.TestBean;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DifferentPackageBean &#123;</span><br><span class=\"line\">    public void setBean() &#123;</span><br><span class=\"line\">        TestBean testBean = new TestBean();</span><br><span class=\"line\">        //public修饰成员可被任何人访问</span><br><span class=\"line\">        testBean.publicParam = 12;</span><br><span class=\"line\">        //ERROR 包访问权限成员无法被其他包中的类访问</span><br><span class=\"line\">        testBean.defaultParam = &quot;Bob&quot;;</span><br><span class=\"line\">        //ERROR protected成员无法被其他包中的类访问</span><br><span class=\"line\">        testBean.protectedParam = &quot;UK&quot;;</span><br><span class=\"line\">        //ERROR private成员只能被类型创建者及类型内部方法访问</span><br><span class=\"line\">        testBean.privateParam = &quot;man&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"41-this和super有什么区别？\"><a href=\"#41-this和super有什么区别？\" class=\"headerlink\" title=\"41. this和super有什么区别？\"></a>41. this和super有什么区别？</h4><p>（1）this是自身的一个对象，代表对象本身，指向对象本身的一个指针。<br>（2）super可以理解为是指向自己超（父）类对象的一个指针，而这个超类指的是离自己最近的一个父类。<br>（3）属性的区别，this访问本类中的属性，如果本类没有此属性则从父类中继续查找。super访问父类中的属性。<br>（4）方法的区别，this访问本类中的方法，如果本类没有此方法则从父类中继续查找。super访问父类中的方法。<br>（5）构造的区别，this调用本类构造，必须放在构造方法的首行。super调用父类构造，必须放在子类构造方法首行。</p>\n<h4 id=\"42-amp-和-amp-amp-的区别是什么？\"><a href=\"#42-amp-和-amp-amp-的区别是什么？\" class=\"headerlink\" title=\"42. &amp;和&amp;&amp;的区别是什么？\"></a>42. &amp;和&amp;&amp;的区别是什么？</h4><p>（1）java 中 &amp;&amp; 和 &amp; 都是表示与的逻辑运算符，都表示逻辑运输符 and，当两边的表达式都为 true 的时候，整个运算结果才为 true，否则为 false。<br>（2）&amp; 叫做按位与，&amp; 直接操作整数基本类型，而 &amp;&amp; 不行。按位与运算符 “&amp;” 是双目运算符。其功能是参与运算的两数各对应的二进位相与。只有对应的两个二进位都为 1 时，结果位才为 1。参与运算的两个数均以补码出现。例如， 0x31 &amp; 0x0f 的结果为 0x01<br>（3）&amp;&amp; 叫做短路与，&amp;&amp; 有短路效应，即：当第一个布尔运算为 false，第二个布尔运算不执行。而 &amp; 运算符没有。例如，对于 if (str !&#x3D; null &amp;&amp; !str.equals (“”)) 表达式，当 str 为 null 时，后面的表达式不会执行，所以不会出现 NullPointerException。如果将 &amp;&amp; 改为 &amp;，则会抛出 NullPointerException 异常。 If (x&#x3D;&#x3D;33 &amp; ++y&gt;0) y 会增长， If (x&#x3D;&#x3D;33 &amp;&amp; ++y&gt;0) 不会增长</p>\n<h4 id=\"43-和-的区别是什么？\"><a href=\"#43-和-的区别是什么？\" class=\"headerlink\" title=\"43. ||和|的区别是什么？\"></a>43. ||和|的区别是什么？</h4><p>（1）||和|都是表示“或”，区别是||只要满足第一个条件，后面的条件就不再判断（实际也不执行），而|要对所有的条件进行判断。<br>（2）“||”: 如果左边计算后的操作数为true,右边则不再执行，返回true；<br>（3）“|”：前后两个操作数都会进行计算。也就是说：“|”不存在短路。</p>\n<h4 id=\"44-while和do-while有什么区别？\"><a href=\"#44-while和do-while有什么区别？\" class=\"headerlink\" title=\"44. while和do while有什么区别？\"></a>44. while和do while有什么区别？</h4><p>（1）while，在while中的条件只要满足为true，则一直进行循环。<br>（2）do while，无论如何一定先执行一次do，具体可以看如下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    boolean flag = false;</span><br><span class=\"line\">    int i = 0;</span><br><span class=\"line\">    while(flag)&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(&quot;while循环后结果：&quot;+i);</span><br><span class=\"line\">    do&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125; while (flag);</span><br><span class=\"line\">    System.out.println(&quot;do while循环后结果：&quot;+i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">while循环后结果：0</span><br><span class=\"line\">do while循环后结果：1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"45-如何跳出多重循环？\"><a href=\"#45-如何跳出多重循环？\" class=\"headerlink\" title=\"45. 如何跳出多重循环？\"></a>45. 如何跳出多重循环？</h4><p>（1）普通的跳出循环通常使用break，但是break只能跳出当前循环，如果外层仍然有循环则无法跳出<br>（2）如果需要跳出多重循环则可以在指定的某一层循环设定为名字，则在break后边增加制定的名字，即可直接跳出具体某一层的循环，具体代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    // 为外层循环设定一个名字</span><br><span class=\"line\">    outer:</span><br><span class=\"line\">    for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">        // 内层循环</span><br><span class=\"line\">        inner:</span><br><span class=\"line\">        for (int j = 0; j &lt; 3; j++) &#123;</span><br><span class=\"line\">            System.out.println(&quot;i的值为:&quot; + i + &quot; j的值为:&quot; + j);</span><br><span class=\"line\"></span><br><span class=\"line\">            if (j == 1) &#123;</span><br><span class=\"line\">            // 跳出outer标签所标识的循环。</span><br><span class=\"line\">                //break inner;</span><br><span class=\"line\">                break outer;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">i的值为:0 j的值为:0</span><br><span class=\"line\">i的值为:0 j的值为:1</span><br><span class=\"line\">//但是如果使用break inner则只能跳出内层循环，外层循环仍然执行，具体输出如下</span><br><span class=\"line\">i的值为:0 j的值为:0</span><br><span class=\"line\">i的值为:0 j的值为:1</span><br><span class=\"line\">i的值为:1 j的值为:0</span><br><span class=\"line\">i的值为:1 j的值为:1</span><br><span class=\"line\">i的值为:2 j的值为:0</span><br><span class=\"line\">i的值为:2 j的值为:1</span><br><span class=\"line\">i的值为:3 j的值为:0</span><br><span class=\"line\">i的值为:3 j的值为:1</span><br><span class=\"line\">i的值为:4 j的值为:0</span><br><span class=\"line\">i的值为:4 j的值为:1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"46-int-和-Integer-有哪些区别？\"><a href=\"#46-int-和-Integer-有哪些区别？\" class=\"headerlink\" title=\"46. int 和 Integer 有哪些区别？\"></a>46. int 和 Integer 有哪些区别？</h4><p>（1）int和Integer的区别<br>Integer是int的包装类；int是基本数据类型,长度为32位（4）字节。<br>Integer是Java提供的封装类，在java.lang.Integer包里面。<br>Integer变量必须实例化后才能使用；int变量不需要。<br>Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值。<br>Integer的默认值是null；int的默认值是0</p>\n<p>（2）关于Integer和int的深入比较<br>由于Integer变量实际上是对一个Integer对象的引用，所以两个通过new生成的Integer变量永远是不相等的（因为new生成的是两个对象，其内存地址不同）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i = new Integer(100);</span><br><span class=\"line\">integer j = new Integer(100);</span><br><span class=\"line\">System.out.println(i==j);</span><br><span class=\"line\">//输出</span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure>\n<p>Integer变量和int变量比较时，只要两个变量的值是向等的，则结果为true（因为包装类Integer和基本数据类型int比较时，Java会自动拆包装为int，然后进行比较，实际上就变为两个int变量的比较）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i = new Integer(100);</span><br><span class=\"line\">int j = 100;</span><br><span class=\"line\">System.out.ptintln(i == j);</span><br><span class=\"line\">//输出</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n<p>非new生成的Integer变量和new Integer()生成的变量比较时，结果为false。（因为 ①当变量值在-128~127之间时，非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i = new Integer(100);</span><br><span class=\"line\">Integer j = 100;</span><br><span class=\"line\">System.out.print(i == j);</span><br><span class=\"line\">//输出</span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure>\n<p>对于两个非new生成的Integer对象，进行比较时，如果两个变量的值在区间-128到127之间，则比较结果为true，如果两个变量的值不在此区间，则比较结果为false。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i = 100;</span><br><span class=\"line\">Integer j = 100;</span><br><span class=\"line\">System.out.print(i == j); </span><br><span class=\"line\">//输出</span><br><span class=\"line\">true</span><br><span class=\"line\">Integer i = 128;</span><br><span class=\"line\">Integer j = 128;</span><br><span class=\"line\">System.out.print(i == j); </span><br><span class=\"line\">//输出</span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure>\n<p>对于上面输出结果的原因：<br>java在编译Integer i &#x3D;100 ;时，会翻译成为Integer i &#x3D; Integer.valueOf(100);而java API中对Integer类型的valueOf的定义如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Integer valueOf(int i)&#123;</span><br><span class=\"line\">    assert IntegerCache.high &gt;= 127;</span><br><span class=\"line\">    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)&#123;</span><br><span class=\"line\">        return IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return new Integer(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面我们可以知道给 Interger 赋予的 int 数值在 - 128 - 127 的时候，直接从 cache 中获取，这些 cache 引用对 Integer 对象地址是不变的，但是不在这个范围内的数字，则 new Integer (i) 这个地址是新的地址，不可能一样的.</p>\n<h4 id=\"47-有了-int-为什么还要有-Integer-？\"><a href=\"#47-有了-int-为什么还要有-Integer-？\" class=\"headerlink\" title=\"47. 有了 int 为什么还要有 Integer ？\"></a>47. 有了 int 为什么还要有 Integer ？</h4><p>（1）因为Java语言是面向对象的，对象封装可以把属性（数据跟处理这些数据的方法）结合在一起。比如Integer就有parseInt()等方法来专门处理int型相关的数据。<br>（2）在Java中绝大部分方法或类都是用来处理类类型对象的，如ArrayList和LinkedList集合类就只能以类作为它的存储对象，而这时如果想把一个int型的数据存入list是不可能的，必须把它包装成类，也就是Integer才能被List所接受。</p>\n<h4 id=\"48-Integer-的装箱和拆箱\"><a href=\"#48-Integer-的装箱和拆箱\" class=\"headerlink\" title=\"48. Integer 的装箱和拆箱\"></a>48. Integer 的装箱和拆箱</h4><p>（1）自动装箱，将基本数据类型转化为对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//等价于Integer num = Integer.valueOf(100);</span><br><span class=\"line\">Integer i=100;</span><br></pre></td></tr></table></figure>\n<p>（2）自动拆箱，将对象转化为基本数据类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//声明一个Integer对象</span><br><span class=\"line\">Integer i = 100;</span><br><span class=\"line\">//进行计算时自动拆箱</span><br><span class=\"line\">i++;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"49-String是否是基本数据类型？\"><a href=\"#49-String是否是基本数据类型？\" class=\"headerlink\" title=\"49. String是否是基本数据类型？\"></a>49. String是否是基本数据类型？</h4><p>（1）首先说不是基本类型。<br>（2）JAVA一共有八种基本数据类型：byte，short，char，int，long，double，float，boolean</p>\n<h4 id=\"50-String-aaaStr-x3D-”aaa”-与-String-aaaStr-x3D-new-String-“aaa”-相同么？\"><a href=\"#50-String-aaaStr-x3D-”aaa”-与-String-aaaStr-x3D-new-String-“aaa”-相同么？\" class=\"headerlink\" title=\"50. String aaaStr&#x3D;”aaa” 与 String aaaStr &#x3D; new String(“aaa”) 相同么？\"></a>50. String aaaStr&#x3D;”aaa” 与 String aaaStr &#x3D; new String(“aaa”) 相同么？</h4><p>（1）String aaaStr &#x3D; “aaa” 会将字符串aaa分配到常量池中，如果常量池中没有该字符串，则会在常量池中创建一个字符串aaa，然后把地址赋给变量aaaStr；如果存在字符串aaa，则直接将常量池中字符串aaa的地址赋给aaaStr<br>（2）String aaaStr &#x3D; new String(“aaa”) 会在堆内存中创建一个String对象，并将对象的地址赋给aaaStr，后期如果仍然有String bbbStr &#x3D; new String(“aaa”) 及时字符串都是aaa，但是仍然是新创建一个String对象，是分别的两个对象</p>\n<h4 id=\"51-什么是反射？\"><a href=\"#51-什么是反射？\" class=\"headerlink\" title=\"51. 什么是反射？\"></a>51. 什么是反射？</h4><p>（1）Java中反射是动态获取信息以及动态调用对象方法的一种反射机制。<br>（2）Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。而这也是Java被视为动态语言的一个关键性质。<br>（3）Java反射的功能是在运行时判断任意一个对象所属的类，在运行时构造任意一个类的对象，在运行时判断任意一个类所具有的成员变量和方法，在运行时调用任意一个对象的方法，生成动态代理。<br>（4）Java反射的实现方式<br>第一种，使用 Class.forName 静态方法。当你知道该类的全路径名时，你可以使用该方法获取 Class 类对象。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clz = Class.forName(&quot;com.aaa.Apple&quot;);</span><br><span class=\"line\">Apple apple = (Apple)clz.newInstance();</span><br></pre></td></tr></table></figure>\n<p>第二种，使用 .class 方法。这种方法只适合在编译前就知道操作的 Class。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clz = Apple.class;</span><br><span class=\"line\">Constructor constructor = clz.getConstructor();</span><br><span class=\"line\">Apple apple = (Apple)constructor.newInstance();</span><br></pre></td></tr></table></figure>\n<p>第三种，使用类对象的 getClass() 方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = new String(&quot;Hello&quot;);</span><br><span class=\"line\">Class clz = str.getClass();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"52-Java-中为什么不允许从静态方法中访问非静态变量？\"><a href=\"#52-Java-中为什么不允许从静态方法中访问非静态变量？\" class=\"headerlink\" title=\"52. Java 中为什么不允许从静态方法中访问非静态变量？\"></a>52. Java 中为什么不允许从静态方法中访问非静态变量？</h4><p>（1）静态变量属于类本身，在类加载的时候就会分配内存，可以通过类名直接访问<br>（2）非静态变量属于类的对象，只有在类的对象产生时，才会分配内存，通过类的实例去访问<br>（3）静态方法也属于类本身，但是此时没有类的实例，内存中没有非静态变量，所以无法调用<br>（4）说白了就是静态方法读取非静态变量，很可能不知道当时值是什么，不确定，没有实例化，静态方法也找不到它</p>\n<h4 id=\"53-float-和-double-的区别是什么？\"><a href=\"#53-float-和-double-的区别是什么？\" class=\"headerlink\" title=\"53. float 和 double 的区别是什么？\"></a>53. float 和 double 的区别是什么？</h4><p>（1）内存中占有的字节数不同，单精度浮点数float在内存中占有4个字节，双精度浮点数double在内存中占有8个字节<br>（2）有效数字位数不同，单精度浮点数有效数字8位，双精度浮点数有效数字16位；<br>（3）数值取值范围不同，单精度浮点数的表示范围：-3.40E+38<del>3.40E+38，双精度浮点数的表示范围：-1.79E+308</del>-1.79E+308<br>（4）在程序中处理速度不同 一般来说，CPU处理单精度浮点数的速度比双精度浮点数的速度快；如果不声明，默认小数是double类型，如果想用float，要进行强转。<br>举例float f&#x3D;1.3；会编译报错，正确的写法是float f &#x3D; (float)1.3，或者float a &#x3D; 1.3f，或者float a &#x3D; 1.3f<br>注意 float是八位有效数字，第七位会四舍五入。</p>\n<h4 id=\"54-Java-中-6-0-1-x3D-x3D-0-6-是否为true？\"><a href=\"#54-Java-中-6-0-1-x3D-x3D-0-6-是否为true？\" class=\"headerlink\" title=\"54. Java 中 6*0.1 &#x3D;&#x3D; 0.6 是否为true？\"></a>54. Java 中 6*0.1 &#x3D;&#x3D; 0.6 是否为true？</h4><p>返回false，因为浮点数不能完全精确的表示，一般会损失一定的精度。下面例子可以看出来6<em>0.1得到结果是0.6000000000000001，但是5</em>0.1却没有问题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    System.out.println(6*0.1 == 0.6);</span><br><span class=\"line\">    System.out.println(6*0.1);</span><br><span class=\"line\">    System.out.println(0.6);</span><br><span class=\"line\">    System.out.println(5*0.1 == 0.5);</span><br><span class=\"line\">    System.out.println(5*0.1);</span><br><span class=\"line\">    System.out.println(0.5);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">false</span><br><span class=\"line\">0.6000000000000001</span><br><span class=\"line\">0.6</span><br><span class=\"line\">true</span><br><span class=\"line\">0.5</span><br><span class=\"line\">0.5</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"55-实例化创建对象有几种方式？\"><a href=\"#55-实例化创建对象有几种方式？\" class=\"headerlink\" title=\"55. 实例化创建对象有几种方式？\"></a>55. 实例化创建对象有几种方式？</h4><p>（1）通过 new 对象的方式创建<br><code>TestBean a = new TestBean();</code><br>（2）通过 clone() 方法创建<br><code>TestBean b = a.clone();</code><br>（3）通过反射机制创建，第51题已经写出了反射的创建例子代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clz = Class.forName(&quot;com.aaa.Apple&quot;);</span><br><span class=\"line\">Apple apple = (Apple)clz.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">Class clz = Apple.class;</span><br><span class=\"line\">Constructor constructor = clz.getConstructor();</span><br><span class=\"line\">Apple apple = (Apple)constructor.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">String str = new String(&quot;Hello&quot;);</span><br><span class=\"line\">Class clz = str.getClass();</span><br></pre></td></tr></table></figure>\n<p>（4）序列化反序列化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    ObjectInputStream in = ObjectInputStream(new FilelnputStream(&quot;/data.txt&quot;));</span><br><span class=\"line\">    TestBean a = (TestBean) in.readObject();</span><br><span class=\"line\">    System.out.println(&quot;反序列化a：&quot; + a);</span><br><span class=\"line\">    in.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"56-NotEmpty-NotNull和-NotBlank的区别\"><a href=\"#56-NotEmpty-NotNull和-NotBlank的区别\" class=\"headerlink\" title=\"56. @NotEmpty,@NotNull和@NotBlank的区别\"></a>56. @NotEmpty,@NotNull和@NotBlank的区别</h4><p>（1）@NotEmpty，不能为null，且Size&gt;0<br>（2）@NotNull，不能为null，但可以为empty,没有Size的约束<br>（3）@NotBlank，只用于String,不能为null且trim()之后size&gt;0</p>\n<h4 id=\"57-try-里有一个return语句，那么紧跟在这个try后的finally-里的code会不会被执行，什么时候被执行，在return前还是后\"><a href=\"#57-try-里有一个return语句，那么紧跟在这个try后的finally-里的code会不会被执行，什么时候被执行，在return前还是后\" class=\"headerlink\" title=\"57. try {}里有一个return语句，那么紧跟在这个try后的finally{}里的code会不会被执行，什么时候被执行，在return前还是后?\"></a>57. try {}里有一个return语句，那么紧跟在这个try后的finally{}里的code会不会被执行，什么时候被执行，在return前还是后?</h4><p>（1）finally{}中的语句是一定会执行的，那么这个可能正常脱口而出就是return之前，return之后可能就出了这个方法了，鬼知道跑哪里去了，但更准确的应该是在return中间执行，请看下面程序代码的运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestMain &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        TestMain test = new TestMain();</span><br><span class=\"line\">        System.out.println(test.test());</span><br><span class=\"line\">        ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int test() &#123;</span><br><span class=\"line\">        int x = 1;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(&quot;try method&quot;);</span><br><span class=\"line\">            return x;</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            System.out.println(&quot;finally&quot;);</span><br><span class=\"line\">            ++x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">try method</span><br><span class=\"line\">finally</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<p>（2）运行结果分别按照顺序输出，try内部日志，finally内部日志，最终返回结果1<br>（3）为什么呢？主函数调用子函数并得到结果的过程，好比主函数准备一个空罐子，当子函数要返回结果时，先把结果放在罐子里，然后再将程序逻辑返回到主函数。所谓返回，就是子函数说，我不运行了，你主函数继续运行吧，这没什么结果可言，结果是在说这话之前放进罐子里的。</p>\n<h4 id=\"58-能将-int-强制转换为-byte-类型的变量吗？如果该值大于-byte-类型的范围，将会出现什么现象？\"><a href=\"#58-能将-int-强制转换为-byte-类型的变量吗？如果该值大于-byte-类型的范围，将会出现什么现象？\" class=\"headerlink\" title=\"58. 能将 int 强制转换为 byte 类型的变量吗？如果该值大于 byte 类型的范围，将会出现什么现象？\"></a>58. 能将 int 强制转换为 byte 类型的变量吗？如果该值大于 byte 类型的范围，将会出现什么现象？</h4><p>可以做强制转换，但是 Java 中 int 是 32 位的，而 byte 是 8 位的，但是，如果强制转化，int 类型的高 24 位将会被丢弃，因为byte 类型的范围是从 -128 到 128。</p>\n<h4 id=\"59-字节流与字符流的区别\"><a href=\"#59-字节流与字符流的区别\" class=\"headerlink\" title=\"59. 字节流与字符流的区别\"></a>59. 字节流与字符流的区别</h4><p>（1）要把一段二进制数据数据逐一输出到某个设备中，或者从某个设备中逐一读取一段二进制数据，不管输入输出设备是什么，我们要用统一的方式来完成这些操作，用一种抽象的方式进行描述，这个抽象描述方式起名为IO流，对应的抽象类为OutputStream和InputStream，不同的实现类就代表不同的输入和输出设备，它们都是针对字节进行操作的。<br>（2）计算机中的一切最终都是二进制的字节形式存在。对于经常用到的中文字符，首先要得到其对应的字节，然后将字节写入到输出流。读取时，首先读到的是字节，可是我们要把它显示为字符，我们需要将字节转换成字符。由于这样的需求很广泛，Java专门提供了字符流包装类。<br>（3）底层设备永远只接受字节数据，有时候要写字符串到底层设备，需要将字符串转成字节再进行写入。字符流是字节流的包装，字符流则是直接接受字符串，它内部将串转成字节，再写入底层设备，这为我们向IO设备写入或读取字符串提供了一点点方便。<br>（4）字符向字节转换时，要注意编码的问题，因为字符串转成字节数组，其实是转成该字符的某种编码的字节形式，读取也是反之的道理。</p>\n<h4 id=\"60-什么是java序列化，如何实现java序列化？或者请解释Serializable接口的作用。\"><a href=\"#60-什么是java序列化，如何实现java序列化？或者请解释Serializable接口的作用。\" class=\"headerlink\" title=\"60. 什么是java序列化，如何实现java序列化？或者请解释Serializable接口的作用。\"></a>60. 什么是java序列化，如何实现java序列化？或者请解释Serializable接口的作用。</h4><p>（1）将一个java对象变成字节流的形式传出去或者从一个字节流中恢复成一个java对象，例如，要将java对象存储到硬盘或者传送给网络上的其他计算机，这个过程我们可以自己写代码去把一个java对象变成某个格式的字节流再传输。<br>（2）jre本身就提供了这种支持，我们可以调用OutputStream的writeObject方法来做，如果要让java帮我们做，要被传输的对象必须实现serializable接口，这样，javac编译时就会进行特殊处理，编译的类才可以被writeObject方法操作，这就是所谓的序列化。需要被序列化的类必须实现Serializable接口，该接口是一个mini接口，其中没有需要实现方法，implements Serializable只是为了标注该对象是可被序列化的。<br>（3）在web开发中，如果对象被保存在了Session中，tomcat在重启时要把Session对象序列化到硬盘，这个对象就必须实现Serializable接口。如果对象要经过分布式系统进行网络传输，被传输的对象就必须实现Serializable接口。</p>\n<h4 id=\"61-switch语句能否作用在byte上，能否作用在long上，能否作用在String上\"><a href=\"#61-switch语句能否作用在byte上，能否作用在long上，能否作用在String上\" class=\"headerlink\" title=\"61. switch语句能否作用在byte上，能否作用在long上，能否作用在String上?\"></a>61. switch语句能否作用在byte上，能否作用在long上，能否作用在String上?</h4><p>（1）在switch（e）中，e只能是一个整数表达式或者枚举常量，整数表达式可以是int基本类型或Integer包装类型，由于byte,short,char都可以隐含转换为int，所以，这些类型以及这些类型的包装类型也是可以的。<br>（2）jdk1.7之后加入String，通过hashCode转化为int，所以可以适用于switch语句中。<br>（3）long类型都不符合switch的语法规定，并且不能被隐式转换成int类型，所以，它们不能作用于swtich语句中。</p>\n<h4 id=\"62-使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？\"><a href=\"#62-使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？\" class=\"headerlink\" title=\"62. 使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？\"></a>62. 使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？</h4><p>（1）使用final关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的。例如，对于如下语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finalStringBuffer a=new StringBuffer(&quot;immutable&quot;);</span><br><span class=\"line\">//执行如下语句将报告编译期错误：</span><br><span class=\"line\">a=new StringBuffer(&quot;&quot;);</span><br><span class=\"line\">//但是，执行如下语句则可以通过编译：</span><br><span class=\"line\">a.append(&quot; broken!&quot;);</span><br></pre></td></tr></table></figure>\n<p>（2）有人在定义方法的参数时，可能想采用如下形式来阻止方法内部修改传进来的参数对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void method(final StringBuffer param)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）在该方法内部仍然可以增加如下代码来修改参数对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">param.append(&quot;a&quot;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"63-是否可以从一个static方法内部发出对非static方法的调用？\"><a href=\"#63-是否可以从一个static方法内部发出对非static方法的调用？\" class=\"headerlink\" title=\"63. 是否可以从一个static方法内部发出对非static方法的调用？\"></a>63. 是否可以从一个static方法内部发出对非static方法的调用？</h4><p>可以，可以通过在内部对非static方法的类实例化后，在调用即可，代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">            TestController.ttt();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void ttt() &#123;</span><br><span class=\"line\">        TestController a = new TestController();</span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        a.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void test()&#123;</span><br><span class=\"line\">        System.out.println(&quot;1111&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">com.buxuesong.account.api.controller.TestController@2530c12</span><br><span class=\"line\">1111</span><br><span class=\"line\">com.buxuesong.account.api.controller.TestController@73c6c3b2</span><br><span class=\"line\">1111</span><br><span class=\"line\">com.buxuesong.account.api.controller.TestController@48533e64</span><br><span class=\"line\">1111</span><br><span class=\"line\">com.buxuesong.account.api.controller.TestController@64a294a6</span><br><span class=\"line\">1111</span><br><span class=\"line\">com.buxuesong.account.api.controller.TestController@7e0b37bc</span><br><span class=\"line\">1111</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"可以扫描下面二维码访问我的小程序来打开，随时随地通过微信访问。\"><a href=\"#可以扫描下面二维码访问我的小程序来打开，随时随地通过微信访问。\" class=\"headerlink\" title=\"可以扫描下面二维码访问我的小程序来打开，随时随地通过微信访问。\"></a>可以扫描下面二维码访问我的小程序来打开，随时随地通过微信访问。</h4><h5 id=\"这个是一些Java基础知识常见面试题，以及答案，我会逐个写出答案，实际上也是我学习的过程，一步一步来吧。\"><a href=\"#这个是一些Java基础知识常见面试题，以及答案，我会逐个写出答案，实际上也是我学习的过程，一步一步来吧。\" class=\"headerlink\" title=\"这个是一些Java基础知识常见面试题，以及答案，我会逐个写出答案，实际上也是我学习的过程，一步一步来吧。\"></a>这个是一些Java基础知识常见面试题，以及答案，我会逐个写出答案，实际上也是我学习的过程，一步一步来吧。</h5><h4 id=\"1-java中-x3D-x3D-和equals和hashCode的区别\"><a href=\"#1-java中-x3D-x3D-和equals和hashCode的区别\" class=\"headerlink\" title=\"1. java中&#x3D;&#x3D;和equals和hashCode的区别\"></a>1. java中&#x3D;&#x3D;和equals和hashCode的区别</h4><p>（1）&#x3D;&#x3D;如果作用于基本数据类型的变量（byte,short,char,int,long,float,double,boolean ），则直接比较其存储的”值”是否相等；如果作用于引用类型的变量（String），则比较的是所指向的对象的地址（即是否指向同一个对象）。<br>（2）equal如果直接使用Object继承的方法则和&#x3D;&#x3D;相同，但是如果equal重写的比较方法，自定义后就按照equal后的定义比较了<br>（3）hashCode是将bean实体转换为哈希编码的方法 </p>\n<h4 id=\"2-int与integer的区别\"><a href=\"#2-int与integer的区别\" class=\"headerlink\" title=\"2. int与integer的区别\"></a>2. int与integer的区别</h4><p> int 是java的基本类型，非null，初始值0，Integer是int的封装类型，可为null，以及一些方法，max，min等 </p>","more":"<h4 id=\"3-抽象类的意义\"><a href=\"#3-抽象类的意义\" class=\"headerlink\" title=\"3. 抽象类的意义\"></a>3. 抽象类的意义</h4><p>无法实例化，没有足够的信息来描述一个对象，实际是对某类对象的抽象出来的一些共有的定义以及方法。为公共的对象的非抽象方法提供了通用的定义，方便子类的使用。也可以定义抽象方法，不能有方法体，这种方法子类必须重写（这个实际和接口是一样的，如果子类也是抽象类可以不重写）</p>\n<h4 id=\"4-接口和抽象类的区别\"><a href=\"#4-接口和抽象类的区别\" class=\"headerlink\" title=\"4. 接口和抽象类的区别\"></a>4. 接口和抽象类的区别</h4><p>一个类可以实现多个接口，但是一个类只能有一个抽象类的父类，接口所有方法都是抽象方法，必须由实现类实现这些抽象方法，而抽象类可以有非抽象方法，抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 public static final 类型的， 接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。</p>\n<h4 id=\"5-能否创建一个包含可变对象的不可变对象\"><a href=\"#5-能否创建一个包含可变对象的不可变对象\" class=\"headerlink\" title=\"5. 能否创建一个包含可变对象的不可变对象?\"></a>5. 能否创建一个包含可变对象的不可变对象?</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestNotChanged &#123;</span><br><span class=\"line\">    public static final TestDto testDto = new TestDto();</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        testDto.setCommParam(CommParam.builder().paramValue(&quot;1111&quot;).build());</span><br><span class=\"line\">        System.out.println(testDto.getCommParam());</span><br><span class=\"line\">        testDto.setCommParam(CommParam.builder().paramValue(&quot;2222&quot;).build());</span><br><span class=\"line\">        System.out.println(testDto.getCommParam());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">CommParam&#123;paramKey=&#x27;null&#x27;, paramValue=&#x27;1111&#x27;&#125;</span><br><span class=\"line\">CommParam&#123;paramKey=&#x27;null&#x27;, paramValue=&#x27;2222&#x27;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-谈谈对java多态的理解\"><a href=\"#6-谈谈对java多态的理解\" class=\"headerlink\" title=\"6. 谈谈对java多态的理解\"></a>6. 谈谈对java多态的理解</h4><p>继承父类，重写父类的方法，Parent parent &#x3D; new Child();这时在执行父类与子类都有的方法，实际会调用子类的方法。</p>\n<h4 id=\"7-String、StringBuffer、StringBuilder区别\"><a href=\"#7-String、StringBuffer、StringBuilder区别\" class=\"headerlink\" title=\"7. String、StringBuffer、StringBuilder区别\"></a>7. String、StringBuffer、StringBuilder区别</h4><p>String 字符串常量、StringBuffer 字符串变量（线程安全，所有方法都是synchronized）、StringBuilder 字符串变量（非线程安全，效率高，没有synchronized）</p>\n<h4 id=\"8-泛型中extends和super的区别\"><a href=\"#8-泛型中extends和super的区别\" class=\"headerlink\" title=\"8. 泛型中extends和super的区别\"></a>8. 泛型中extends和super的区别</h4><p>extends表示泛型的上限（表示必须是该类型或者该类型的子类），super表示泛型的下限（表示必须是该类型或者该类型的父类）</p>\n<h4 id=\"9-进程和线程的区别\"><a href=\"#9-进程和线程的区别\" class=\"headerlink\" title=\"9. 进程和线程的区别\"></a>9. 进程和线程的区别</h4><p>进程cpu执行任务的一段任务，而线程是这个任务在cpu上执行的具体操作。</p>\n<h4 id=\"10-序列化的方式\"><a href=\"#10-序列化的方式\" class=\"headerlink\" title=\"10. 序列化的方式\"></a>10. 序列化的方式</h4><p>1&gt;对象实现了序列化接口Serializable<br>2&gt;实现接口Externalizable,实现writeExternal和readExternal方法</p>\n<h4 id=\"11-string-转换成-integer的方式及原理\"><a href=\"#11-string-转换成-integer的方式及原理\" class=\"headerlink\" title=\"11. string 转换成 integer的方式及原理\"></a>11. string 转换成 integer的方式及原理</h4><p>第一位可以是符号位（正负），正负值会在最后一步取正反。从左到右按位取值，例如325，第一位为3，则循环取，取出3，将3变为-3放到result中（个人认为这个是避免从正数超过int的最大值溢出），再取第二位2，这时需要先将result<em>进制（一般为10进制），变为-30，之后-30减去2得到result为-32，再取第三位5，先将result</em>进制，result变为-320，之后-320减去5得到-325，循环完毕，这个值是正数，所以需要取反，得到325.</p>\n<h4 id=\"12-静态属性和静态方法是否可以被继承？是否可以被重写？以及原因？\"><a href=\"#12-静态属性和静态方法是否可以被继承？是否可以被重写？以及原因？\" class=\"headerlink\" title=\"12. 静态属性和静态方法是否可以被继承？是否可以被重写？以及原因？\"></a>12. 静态属性和静态方法是否可以被继承？是否可以被重写？以及原因？</h4><p>可以被子类继承使用，但是重写后不生效，因为static方法以及属性都是全局的，需要通过具体class名称来使用，即使方法名或者属性名相同，父类的静态方法只能是父类后边带方法，子类的静态方法只能是子类后边带方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Parent &#123;</span><br><span class=\"line\">    public static String aaa = &quot;aaa&quot;;</span><br><span class=\"line\">    public static String testMethod() &#123;</span><br><span class=\"line\">        return aaa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Child extends Parent &#123;</span><br><span class=\"line\">    public static String aaa = &quot;aaaa&quot;;</span><br><span class=\"line\">    public static String testMethod() &#123;</span><br><span class=\"line\">        return aaa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Parent a = new Child();</span><br><span class=\"line\">        System.out.println(a.aaa);</span><br><span class=\"line\">        Child b = new Child();</span><br><span class=\"line\">        System.out.println(b.aaa);</span><br><span class=\"line\">        System.out.println(Parent.testMethod());</span><br><span class=\"line\">        System.out.println(Child.testMethod());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">aaa</span><br><span class=\"line\">aaaa</span><br><span class=\"line\">aaa</span><br><span class=\"line\">aaaa</span><br></pre></td></tr></table></figure>\n<h4 id=\"13-成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及项目中的应用\"><a href=\"#13-成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及项目中的应用\" class=\"headerlink\" title=\"13. 成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及项目中的应用\"></a>13. 成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及项目中的应用</h4><p>成员内部类:定义在类内部的非静态类;<br>静态内部类:定义在类内部的静态类;<br>局部内部类:定义在方法中的类（只在某个方法中使用）;<br>匿名内部类:没有访问修饰符的直接通过new出来的内部类（例如事件监听的回调方法）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//匿名内部类</span><br><span class=\"line\">public void test() &#123;</span><br><span class=\"line\">        Object obj = new Object() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public String toString() &#123;</span><br><span class=\"line\">                System.out.println(b);</span><br><span class=\"line\">                return String.valueOf(a);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(obj.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"14-讲一下常见编码方式？\"><a href=\"#14-讲一下常见编码方式？\" class=\"headerlink\" title=\"14. 讲一下常见编码方式？\"></a>14. 讲一下常见编码方式？</h4><p>ASCII，ISO-8859-1、GBK&#x2F;GB2312&#x2F;UTF-16(双字节)&#x2F;UTF-8（变长，开头是0表示ASCII，开始是11表示首字节，开始时10表示非首字节，前一个才是首字节）<br>如何格式化日期?</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date FormatDate = new SimpleDateFormat(&quot;YYYY-MM-DD&quot;).parse(&quot;2020-01-01&quot;)</span><br><span class=\"line\">LocalDateTime.now(ZoneId.of(&quot;Asia/Shanghai&quot;)).format(DateTimeFormatter.ofPattern(&quot;YYYY-MM-DD&quot;))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"15-Java的异常体系\"><a href=\"#15-Java的异常体系\" class=\"headerlink\" title=\"15. Java的异常体系\"></a>15. Java的异常体系</h4><h4 id=\"16-什么是异常链\"><a href=\"#16-什么是异常链\" class=\"headerlink\" title=\"16. 什么是异常链\"></a>16. 什么是异常链</h4><p>不会覆盖原有的异常信息，将之前throw出来的异常加入到新的异常中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 异常链写法1</span><br><span class=\"line\">Exception e2 = new Exception(&quot;第2个异常&quot;);</span><br><span class=\"line\">e2.initCause(e); // 异常链信息的传递</span><br><span class=\"line\">throw e2;</span><br><span class=\"line\">// 异常链写法2</span><br><span class=\"line\">// throw new Exception(&quot;第2个异常&quot;, e);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"17-throw和throws的区别\"><a href=\"#17-throw和throws的区别\" class=\"headerlink\" title=\"17. throw和throws的区别\"></a>17. throw和throws的区别</h4><p>throw表示创建新的异常并扔出来，而throws表示方法定义的末尾，将内部可能throw出来的异常直接在方法级抛出</p>\n<h4 id=\"18-反射的原理，反射创建类实例的三种方式是什么。\"><a href=\"#18-反射的原理，反射创建类实例的三种方式是什么。\" class=\"headerlink\" title=\"18. 反射的原理，反射创建类实例的三种方式是什么。\"></a>18. 反射的原理，反射创建类实例的三种方式是什么。</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//第一种，使用 Class.forName 静态方法。当你知道该类的全路径名时，你可以使用该方法获取 Class 类对象。</span><br><span class=\"line\">Class clz = Class.forName(&quot;com.aaa.Apple&quot;);</span><br><span class=\"line\">Apple apple = (Apple)clz.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">// 第二种，使用 .class 方法。</span><br><span class=\"line\">//这种方法只适合在编译前就知道操作的 Class。</span><br><span class=\"line\">Class clz = Apple.class;</span><br><span class=\"line\">Constructor constructor = clz.getConstructor();</span><br><span class=\"line\">Apple apple = (Apple)constructor.newInstance();</span><br><span class=\"line\">//第三种，使用类对象的 getClass() 方法。</span><br><span class=\"line\">String str = new String(&quot;Hello&quot;);</span><br><span class=\"line\">Class clz = str.getClass();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"19-java当中的四种引用\"><a href=\"#19-java当中的四种引用\" class=\"headerlink\" title=\"19. java当中的四种引用\"></a>19. java当中的四种引用</h4><p>强引用：直接通过&#x3D;赋值，内存不够也不会被回收，常见用法；<br>软引用：SoftReference<?>来表示，内存不足时会回收软引用，写完下面代码才理解，实际上这个是定义了一个引用，指向了里面的地址，实际上即使里面的变量设定为null了，引用还在，但是当内存不足时候回收掉，软引用就无法get到值了，变为null了，另外注意一定是new String出来，而不是直接写=\"123\",这样写多少都是一个地址，无法回收，但是实际上这个没有回收成功，软引用的场景是缓存，图片缓存等；\n弱引用：WeakReference<?>来表示，和软引用的写法类似，但是只要内存回收，弱引用就会被回收，下面的回收成功了，WeakHashMap，可以被回收的key值（HashMap的key值在删除前在不能被回收），而这种WeakHashMap的key在内存不足时可以被回收，使用前需要判断是否存在；<br>虚引用（PhantomReference） ，只能通过 ReferenceQueue 引用队列一起使用，创建时放入queue中，使用时通过queue的poll取出来，但是随时可能会被回收。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。实际这个就是看何时发生回收的一个监控，目前没有其他的使用场景。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//弱引用</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        String a = new String(&quot;1111&quot;);</span><br><span class=\"line\">        WeakReference&lt;String&gt; list =new WeakReference(a);</span><br><span class=\"line\">        a = null;</span><br><span class=\"line\">        while(true) &#123;</span><br><span class=\"line\">            System.out.println(list.get());</span><br><span class=\"line\">            System.out.println(&quot;-----&quot;);</span><br><span class=\"line\">            System.gc();</span><br><span class=\"line\">            System.out.println(list.get());</span><br><span class=\"line\">            System.out.println(&quot;==========================================================================&quot;);</span><br><span class=\"line\">            if(list.get() == null)&#123;</span><br><span class=\"line\">                System.out.println(&quot;BREAKBREAKBREAKBREAK&quot;);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">[GC (Allocation Failure)  1023K-&gt;708K(5632K), 0.0011759 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  1732K-&gt;1034K(5632K), 0.0010715 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  2056K-&gt;1224K(5632K), 0.0008859 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  2247K-&gt;1460K(5632K), 0.0009643 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  2484K-&gt;1577K(5632K), 0.0009887 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  2586K-&gt;1703K(5632K), 0.0015657 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  2727K-&gt;1855K(5632K), 0.0017342 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  2879K-&gt;2183K(5632K), 0.0010898 secs]</span><br><span class=\"line\">1111</span><br><span class=\"line\">-----</span><br><span class=\"line\">[GC (System.gc())  2990K-&gt;2264K(5632K), 0.0009776 secs]</span><br><span class=\"line\">[Full GC (System.gc())  2264K-&gt;1588K(5632K), 0.0179253 secs]</span><br><span class=\"line\">null</span><br><span class=\"line\">==========================================================================</span><br><span class=\"line\">BREAKBREAKBREAKBREAK</span><br><span class=\"line\">//虚引用</span><br><span class=\"line\">        String status = new String(&quot;123&quot;);</span><br><span class=\"line\">        ReferenceQueue&lt;String&gt; queue = new ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">        PhantomReference&lt;String&gt; test = new PhantomReference&lt;String&gt;(status, queue);</span><br><span class=\"line\">        status = null;</span><br><span class=\"line\">        System.out.println(queue.poll());</span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\">        Thread.sleep(2000L);</span><br><span class=\"line\">        System.out.println(queue.poll());</span><br><span class=\"line\">//输出</span><br><span class=\"line\">null</span><br><span class=\"line\">java.lang.ref.PhantomReference@58372a00</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"20-深拷贝和浅拷贝的区别是什么\"><a href=\"#20-深拷贝和浅拷贝的区别是什么\" class=\"headerlink\" title=\"20. 深拷贝和浅拷贝的区别是什么?\"></a>20. 深拷贝和浅拷贝的区别是什么?</h4><p>这里考点是对基本类型和引用类型的理解，基本类型浅拷贝和深拷贝没什么区别，都是copy出一份到新的内存地址，但是引用类型就不一样了，如果是浅拷贝，一些引用变量还是指向之前的地址，这就导致了修改了拷贝前的Bean的某个值，则另外一个Bean的该变量也会变化，因为内存地址是一样的，因此需要重写clone方法，将该变量copy一份到新内存地址，这样修改任何一个都不互相影响。</p>\n<h4 id=\"21-什么是编译器常量？使用它有什么风险？\"><a href=\"#21-什么是编译器常量？使用它有什么风险？\" class=\"headerlink\" title=\"21. 什么是编译器常量？使用它有什么风险？\"></a>21. 什么是编译器常量？使用它有什么风险？</h4><p>这里考点是对编译器（期）常量和运行时常量的理解</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//编译期常量</span><br><span class=\"line\">public static final String TEST = &quot;TEST&quot;;</span><br><span class=\"line\">//运行时常量</span><br><span class=\"line\">public static final double TEST_DOUBLE = Math.random();</span><br></pre></td></tr></table></figure>\n<p>编译期常量实际上是在编译的时候初始化的变量，而运行时常量只有在运行时候才会初始化，编译时不知道是什么值。<br>在咱们大型项目中，会有增量打升级包的情况，此时如果A类引用了其B类的一个编译期常量（A类本次没有编译，B类的常量值修改后编译），那么上线后，会发现A类引用的编译期常量还是之前的值，会导致bug的产生，因此一定要注意一起编译。这个其实引入了JVM的知识点，A类引用了B累的编译期常量，实际会在编译时写死在A类中，也就是即使B类编译变化了也不影响A类的引用。</p>\n<h4 id=\"22-你对String对象的intern-熟悉么\"><a href=\"#22-你对String对象的intern-熟悉么\" class=\"headerlink\" title=\"22. 你对String对象的intern()熟悉么?\"></a>22. 你对String对象的intern()熟悉么?</h4><p>intern实际上是在常量池里寻找与其相等的String，并把地址返回过来，具体可以看下面的，s1和s4通过+实际上是不同的String，但是由于字符串实际相同，因此intern()也是相同的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = &quot;abc&quot;;</span><br><span class=\"line\">String s2 = &quot;a&quot;;</span><br><span class=\"line\">String s3 = &quot;bc&quot;;</span><br><span class=\"line\">String s4 = s2 + s3;</span><br><span class=\"line\">System.out.println(s1 == s4);</span><br><span class=\"line\">System.out.println(s1.intern() == s4.intern());</span><br></pre></td></tr></table></figure>\n<h4 id=\"23-a-x3D-a-b与a-x3D-b有什么区别吗\"><a href=\"#23-a-x3D-a-b与a-x3D-b有什么区别吗\" class=\"headerlink\" title=\"23. a&#x3D;a+b与a+&#x3D;b有什么区别吗?\"></a>23. a&#x3D;a+b与a+&#x3D;b有什么区别吗?</h4><p>其实你注意下，他把类型去掉了？为什么呢？<br>这就是问题所在，隐去类型就是题目关心的，因为实际上如果类型一致，那么就不会有问题这两个操作是一致的，但是如果类型不一致，那么+&#x3D;就会多出来一步类型转换。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte a=1;</span><br><span class=\"line\">//a+=4;这个和下面实际上是相等的操作</span><br><span class=\"line\">   a = (byte)(a+4);</span><br><span class=\"line\">   //但是如果这么写编译期会报错，认为a+4转换为了int，但是实际上a是byte，两个类型不符合了</span><br><span class=\"line\">   a = a+4;</span><br></pre></td></tr></table></figure>\n<h4 id=\"24-静态代理和动态代理的区别，什么场景使用？\"><a href=\"#24-静态代理和动态代理的区别，什么场景使用？\" class=\"headerlink\" title=\"24. 静态代理和动态代理的区别，什么场景使用？\"></a>24. 静态代理和动态代理的区别，什么场景使用？</h4><p>这个有点长，我写了个帖子：<br><a href=\"https://segmentfault.com/a/1190000040962971\">https://segmentfault.com/a/1190000040962971</a></p>\n<h4 id=\"25-如何将一个Java对象序列化到文件里？\"><a href=\"#25-如何将一个Java对象序列化到文件里？\" class=\"headerlink\" title=\"25. 如何将一个Java对象序列化到文件里？\"></a>25. 如何将一个Java对象序列化到文件里？</h4><p>可以查看我的另一个帖子：<br><a href=\"https://segmentfault.com/a/1190000040941021\">https://segmentfault.com/a/1190000040941021</a></p>\n<h4 id=\"26-说说你对Java反射的理解\"><a href=\"#26-说说你对Java反射的理解\" class=\"headerlink\" title=\"26. 说说你对Java反射的理解\"></a>26. 说说你对Java反射的理解</h4><p>可以查看我的另一个帖子：<br><a href=\"https://segmentfault.com/a/1190000040913240\">https://segmentfault.com/a/1190000040913240</a></p>\n<h4 id=\"27-说说你对Java注解的理解\"><a href=\"#27-说说你对Java注解的理解\" class=\"headerlink\" title=\"27. 说说你对Java注解的理解\"></a>27. 说说你对Java注解的理解</h4><p>可以查看我的另一个帖子：<br><a href=\"https://segmentfault.com/a/1190000040957885\">https://segmentfault.com/a/1190000040957885</a></p>\n<h4 id=\"28-说说你对依赖注入的理解\"><a href=\"#28-说说你对依赖注入的理解\" class=\"headerlink\" title=\"28. 说说你对依赖注入的理解\"></a>28. 说说你对依赖注入的理解</h4><p>在没有Spring或者在纯java的代码中，都是自己去new出来的对象，这样会导致很多代码中包含了大量的new，set各种代码<br>例如如果我需要数据库操作先创建Connection连接等一系列操作，很繁琐<br>出现了Spring以后，Spring容器把这些操作集合了，也就是咱们BeanA需要BeanB的时候，不需要再去new操作了，Spring容器帮助咱们把BeanB创建好了<br>BeanA想要使用BeanB直接拿来就可以用了(Spring容器帮助把BeanB注入到BeanA中了，BeanA依赖的BeanB就这样被注入进来了)，这种操作就是依赖注入了。<br>其实很多人还说有Ioc控制反转，个人理解就是以前需要BeanB就new出来就好了，现在容器把创建BeanB的过程拿走了，创建BeanB的过程被容器控制了。<br>DI依赖注入，实际就是BeanA依赖的BeanB被容器帮助下，容器把BeanB注入到了BeanA中。</p>\n<h4 id=\"29-说一下泛型原理，并举例说明\"><a href=\"#29-说一下泛型原理，并举例说明\" class=\"headerlink\" title=\"29. 说一下泛型原理，并举例说明\"></a>29. 说一下泛型原理，并举例说明</h4><p>实际上java的泛型是个伪泛型，使用起来很方便，免去手写转型操作了。<br>具体原理时编译器在编译前会检测你针对List<String>这种定义的集合中存入内容时候，会去检测你传入的类型是否符合类型，如果不符合就给你提示类型传入的不对。<br>另外看源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    list.add(&quot;Sfsdf&quot;);</span><br><span class=\"line\">    String result = list.get(0);</span><br><span class=\"line\">    System.out.println(result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>反编译后源码的，发现了什么，list取出来之后增加一个String转型，这个就是伪泛型了，实际上泛型编译成class时候，会帮助咱们进行转型操作，而不像C中的泛型，独立的类型，不需要转型操作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  List&lt;String&gt; list = new ArrayList();</span><br><span class=\"line\">  list.add(&quot;Sfsdf&quot;);</span><br><span class=\"line\">  String result = (String)list.get(0);</span><br><span class=\"line\">  System.out.println(result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更多的可以查看我的另一个帖子：<br><a href=\"https://segmentfault.com/a/1190000040835933\">https://segmentfault.com/a/1190000040835933</a></p>\n<h4 id=\"30-Java中String的了解\"><a href=\"#30-Java中String的了解\" class=\"headerlink\" title=\"30. Java中String的了解\"></a>30. Java中String的了解</h4><p>String类其实是通过char数组来保存字符串的<br>String类是final类，也即意味着String类不能被继承，并且它的成员方法都默认为final方法<br>String对象一旦被创建就是固定不变的了，对String对象的任何改变都不影响到原对象，相关的任何change操作都会生成新的对象<br>有两种创建方式直接通过””（这种方式直接使用常量池的常量）创建以及new String(“”)（这种方式，会将对象存储到堆中）的方式<br>String str3&#x3D;str1+str2这个操作实际触发了StringBuilder的append方法以及toString方法。<br>但是String str4&#x3D;”abc”+”def”;这种情况下，abc和def都在常量池内，因此拼接时候直接在常量池内拼接，生成的abcdef还在常量池中<br>String.intern()会直接从常量池里找到<br>String是不可变字符串对象，StringBuilder和StringBuffer是可变字符串对象（其内部的字符数组长度可变）<br>String中的对象是不可变的，也就可以理解为常量，显然线程安全。StringBuffer 与 StringBuilder中的方法和功能完全是等价的，只是StringBuffer 中的方法大都采用了synchronized关键字进行修饰，因此是线程安全的，而StringBuilder没有这个修饰，可以被认为是非线程安全的。</p>\n<h4 id=\"31-String为什么要设计成不可变的？\"><a href=\"#31-String为什么要设计成不可变的？\" class=\"headerlink\" title=\"31. String为什么要设计成不可变的？\"></a>31. String为什么要设计成不可变的？</h4><p>如果设计成StringBuilder这种，作为key放在HashSet中，StringBuilder是可变的，如果分别放入了两个不同值的StringBuilder sb1和sb2，放入了后期修改了sb2的值和sb1的值相同，就会违反了HashSet的key值唯一性，另外在大量使用字符串，很多重复的字符串情况下，也是节省了很多存储空间，关键是它不可变所以也不会出现问题。</p>\n<h4 id=\"32-Object类的equal和hashCode方法重写，为什么？\"><a href=\"#32-Object类的equal和hashCode方法重写，为什么？\" class=\"headerlink\" title=\"32. Object类的equal和hashCode方法重写，为什么？\"></a>32. Object类的equal和hashCode方法重写，为什么？</h4><p>首先equal直接使用Object的话，是和&#x3D;&#x3D;表示了相同的意思，因此如果有一些复杂的Bean需要特殊的比较时候，就需要重启equal了。比如修改了eqaul方法，某些情况下表示相同了，如果不重写hashCode时候，再存入HashSet或者HashMap的做为key的时候，可能不相同，这样就会表达出不同的意思。<br>另外java还有个规定：hashcode()不等，一定能推出equals()也不等；hashcode()相等，equals()可能相等，也可能不等。</p>\n<h4 id=\"33-Java中实现多态的机制是什么？\"><a href=\"#33-Java中实现多态的机制是什么？\" class=\"headerlink\" title=\"33. Java中实现多态的机制是什么？\"></a>33. Java中实现多态的机制是什么？</h4><p>Java实现多态有三个必要条件：继承、重写、向上转型。<br>继承：在多态中必须存在有继承关系的子类和父类。<br>重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。<br>向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。<br>只有满足了上述三个条件，我们才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象，从而达到执行不同的行为。<br>重载(overload)和重写(override)<br>如果一个子类继承了一个父类，子类中拥有和父类相同方法名称，返回值，参数类型的话，就是重写，会执行子类中的方法。<br>如果一个类中定义了多个同名方法，他们有不同的参数类型或者参数数量或者返回值类型，那就叫重载<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;以下内容2022.08.14新增&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>\n<h4 id=\"34-面向对象编程的特征有哪些？\"><a href=\"#34-面向对象编程的特征有哪些？\" class=\"headerlink\" title=\"34. 面向对象编程的特征有哪些？\"></a>34. 面向对象编程的特征有哪些？</h4><p>（1）封装 (Encapsulation)，是指隐藏对象的属性和具体如何实现操作，控制成员属性的访问以及修改权限，只能通过专用的public方法来访问获取。具体如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private String test = &quot;测试封装&quot;;</span><br><span class=\"line\">public String getTest()&#123;</span><br><span class=\"line\">return this.name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）继承 (Inheritance)，就是指子类继承父类，使得库子类也能具有父类相同的行为。<br>（3）多态 (Polymorphism)是指同一个行为具有多个不同的表现形式或形态，如一个类的方法在不同的参数情况有不同表现形式。</p>\n<h4 id=\"35-i-和-i的区别\"><a href=\"#35-i-和-i的区别\" class=\"headerlink\" title=\"35. i++和++i的区别\"></a>35. i++和++i的区别</h4><p>（1）i++是先使用当前i值使用，再对i进行自身+1操作。<br>（2）++i则相反，现对自身+1操作，再使用+1后的结果操作。</p>\n<h4 id=\"36-JDK和JRE的区别\"><a href=\"#36-JDK和JRE的区别\" class=\"headerlink\" title=\"36. JDK和JRE的区别\"></a>36. JDK和JRE的区别</h4><p>（1）JRE，Java Runtime Environment（java运行时环境）。即java程序的运行时环境，包含了java虚拟机，java基础类库。<br>（2）JDK，Java Development Kit（java开发工具包）。即java语言编写的程序所需的开发工具包。<br>（3）JDK包含了JRE，同时还包括java源码的编译器javac、监控工具jconsole、分析工具jvisualvm等。</p>\n<h4 id=\"37-JAVA的关键字有哪些？\"><a href=\"#37-JAVA的关键字有哪些？\" class=\"headerlink\" title=\"37. JAVA的关键字有哪些？\"></a>37. JAVA的关键字有哪些？</h4><p>（1）48个关键字：abstract、assert、boolean、break、byte、case、catch、char、class、continue、default、do、double、else、enum、extends、final、finally、float、for、if、implements、import、int、interface、instanceof、long、native、new、package、private、protected、public、return、short、static、strictfp、super、switch、synchronized、this、throw、throws、transient、try、void、volatile、while。<br>（2）2个保留字（现在没用以后可能用到作为关键字）：goto、const。<br>（3）3个特殊直接变量：true、false、null。</p>\n<h4 id=\"38-java中常量是什么？\"><a href=\"#38-java中常量是什么？\" class=\"headerlink\" title=\"38. java中常量是什么？\"></a>38. java中常量是什么？</h4><p>常量就是不变的数据量, 在程序执行的过程中其值不可以发生改变。<br>如下所示就是常量的一种</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final static String NAME = &quot;AAAABBBB&quot;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"39-java中常量有哪些类型？\"><a href=\"#39-java中常量有哪些类型？\" class=\"headerlink\" title=\"39. java中常量有哪些类型？\"></a>39. java中常量有哪些类型？</h4><p>（1）整数常量<br>整型常量是整数类型的数据，有二进制、八进制、十进制和十六进制4种表示形式具体表示形式如下。<br>十进制表示方式：正常数字。 如 13、25等<br>二进制表示方式：以 0b(0B) 开头。 如0b1011 、0B1001<br>十六进制表示方式：以 0x(0X) 开头。 数字以0-9及A-F组成 如0x23A2、0xa、0x10<br>八进制表示方式：以 0 开头。 如01、07、0721<br>（2）浮点数常量，浮点数常量就是在数学中用到的小数，也叫小数类型，分为foat单精度浮点数和double双精度浮点数两种类型。如1.0、-3.15、3.168等<br>（3）字符常量，字符常量用于表示一个字符，一个字符常量要用一对英文半角格式的单引’’号引起来，它可以是英文字母、数字、标点符号以及由转义序列来表示的特殊字符。如 ‘a’，’A’, ‘0’, ‘家’。<br>（4）字符串常量，字符串常量用于表示一串连续的字符，一个字符串常量要用一对英文半角格式的双引号””引起来，如 “我爱Java”，”0123”，””，”null”。<br>（5）布尔型常量值，Java 的布尔型常量只有两个值，即 false（假）和 true（真）。<br>（6）null常量，null常量只有一个值null，表示对象的引用为空。</p>\n<h4 id=\"40-public、private、protected以及默认的区别\"><a href=\"#40-public、private、protected以及默认的区别\" class=\"headerlink\" title=\"40. public、private、protected以及默认的区别\"></a>40. public、private、protected以及默认的区别</h4><p>（1）public，表示紧跟其后的成员可以被任何人引用<br>（2）private，表示紧跟其后的成员除了类型创建者和类型内部的方法，任何人都不可引用，否者程序编译报错<br>（3）protected，与private效果相当，差别仅在于继承的类可以访问protected成员<br>（4）默认访问权限（即定义属性时不加任何关键字修饰），默认访问权限通常被称为“包访问权限”，在这种权限下的成员变量可被同一个包中的其他类访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.buxuesong;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestBean &#123;</span><br><span class=\"line\">    public int publicParam;</span><br><span class=\"line\">    String defaultParam;</span><br><span class=\"line\">    protected String protectedParam;</span><br><span class=\"line\">    private String privateParam;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">package com.buxuesong;</span><br><span class=\"line\"></span><br><span class=\"line\">public class ChildTestBean extends TestBean &#123;</span><br><span class=\"line\">    public void setBean() &#123;</span><br><span class=\"line\">        TestBean testBean = new TestBean();</span><br><span class=\"line\">        //public修饰成员可被任何人访问</span><br><span class=\"line\">        testBean.publicParam = 12;</span><br><span class=\"line\">        //同一个包中的类可访问默认权限成员</span><br><span class=\"line\">        testBean.defaultParam = &quot;Bob&quot;;</span><br><span class=\"line\">        //继承的类可访问protected成员</span><br><span class=\"line\">        testBean.protectedParam = &quot;UK&quot;;</span><br><span class=\"line\">        //ERROR 继承的类无法访问private成员</span><br><span class=\"line\">        testBean.privateParam = &quot;man&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">package com.buxuesong.test;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.buxuesong.TestBean;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DifferentPackageBean &#123;</span><br><span class=\"line\">    public void setBean() &#123;</span><br><span class=\"line\">        TestBean testBean = new TestBean();</span><br><span class=\"line\">        //public修饰成员可被任何人访问</span><br><span class=\"line\">        testBean.publicParam = 12;</span><br><span class=\"line\">        //ERROR 包访问权限成员无法被其他包中的类访问</span><br><span class=\"line\">        testBean.defaultParam = &quot;Bob&quot;;</span><br><span class=\"line\">        //ERROR protected成员无法被其他包中的类访问</span><br><span class=\"line\">        testBean.protectedParam = &quot;UK&quot;;</span><br><span class=\"line\">        //ERROR private成员只能被类型创建者及类型内部方法访问</span><br><span class=\"line\">        testBean.privateParam = &quot;man&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"41-this和super有什么区别？\"><a href=\"#41-this和super有什么区别？\" class=\"headerlink\" title=\"41. this和super有什么区别？\"></a>41. this和super有什么区别？</h4><p>（1）this是自身的一个对象，代表对象本身，指向对象本身的一个指针。<br>（2）super可以理解为是指向自己超（父）类对象的一个指针，而这个超类指的是离自己最近的一个父类。<br>（3）属性的区别，this访问本类中的属性，如果本类没有此属性则从父类中继续查找。super访问父类中的属性。<br>（4）方法的区别，this访问本类中的方法，如果本类没有此方法则从父类中继续查找。super访问父类中的方法。<br>（5）构造的区别，this调用本类构造，必须放在构造方法的首行。super调用父类构造，必须放在子类构造方法首行。</p>\n<h4 id=\"42-amp-和-amp-amp-的区别是什么？\"><a href=\"#42-amp-和-amp-amp-的区别是什么？\" class=\"headerlink\" title=\"42. &amp;和&amp;&amp;的区别是什么？\"></a>42. &amp;和&amp;&amp;的区别是什么？</h4><p>（1）java 中 &amp;&amp; 和 &amp; 都是表示与的逻辑运算符，都表示逻辑运输符 and，当两边的表达式都为 true 的时候，整个运算结果才为 true，否则为 false。<br>（2）&amp; 叫做按位与，&amp; 直接操作整数基本类型，而 &amp;&amp; 不行。按位与运算符 “&amp;” 是双目运算符。其功能是参与运算的两数各对应的二进位相与。只有对应的两个二进位都为 1 时，结果位才为 1。参与运算的两个数均以补码出现。例如， 0x31 &amp; 0x0f 的结果为 0x01<br>（3）&amp;&amp; 叫做短路与，&amp;&amp; 有短路效应，即：当第一个布尔运算为 false，第二个布尔运算不执行。而 &amp; 运算符没有。例如，对于 if (str !&#x3D; null &amp;&amp; !str.equals (“”)) 表达式，当 str 为 null 时，后面的表达式不会执行，所以不会出现 NullPointerException。如果将 &amp;&amp; 改为 &amp;，则会抛出 NullPointerException 异常。 If (x&#x3D;&#x3D;33 &amp; ++y&gt;0) y 会增长， If (x&#x3D;&#x3D;33 &amp;&amp; ++y&gt;0) 不会增长</p>\n<h4 id=\"43-和-的区别是什么？\"><a href=\"#43-和-的区别是什么？\" class=\"headerlink\" title=\"43. ||和|的区别是什么？\"></a>43. ||和|的区别是什么？</h4><p>（1）||和|都是表示“或”，区别是||只要满足第一个条件，后面的条件就不再判断（实际也不执行），而|要对所有的条件进行判断。<br>（2）“||”: 如果左边计算后的操作数为true,右边则不再执行，返回true；<br>（3）“|”：前后两个操作数都会进行计算。也就是说：“|”不存在短路。</p>\n<h4 id=\"44-while和do-while有什么区别？\"><a href=\"#44-while和do-while有什么区别？\" class=\"headerlink\" title=\"44. while和do while有什么区别？\"></a>44. while和do while有什么区别？</h4><p>（1）while，在while中的条件只要满足为true，则一直进行循环。<br>（2）do while，无论如何一定先执行一次do，具体可以看如下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    boolean flag = false;</span><br><span class=\"line\">    int i = 0;</span><br><span class=\"line\">    while(flag)&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(&quot;while循环后结果：&quot;+i);</span><br><span class=\"line\">    do&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125; while (flag);</span><br><span class=\"line\">    System.out.println(&quot;do while循环后结果：&quot;+i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">while循环后结果：0</span><br><span class=\"line\">do while循环后结果：1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"45-如何跳出多重循环？\"><a href=\"#45-如何跳出多重循环？\" class=\"headerlink\" title=\"45. 如何跳出多重循环？\"></a>45. 如何跳出多重循环？</h4><p>（1）普通的跳出循环通常使用break，但是break只能跳出当前循环，如果外层仍然有循环则无法跳出<br>（2）如果需要跳出多重循环则可以在指定的某一层循环设定为名字，则在break后边增加制定的名字，即可直接跳出具体某一层的循环，具体代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    // 为外层循环设定一个名字</span><br><span class=\"line\">    outer:</span><br><span class=\"line\">    for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">        // 内层循环</span><br><span class=\"line\">        inner:</span><br><span class=\"line\">        for (int j = 0; j &lt; 3; j++) &#123;</span><br><span class=\"line\">            System.out.println(&quot;i的值为:&quot; + i + &quot; j的值为:&quot; + j);</span><br><span class=\"line\"></span><br><span class=\"line\">            if (j == 1) &#123;</span><br><span class=\"line\">            // 跳出outer标签所标识的循环。</span><br><span class=\"line\">                //break inner;</span><br><span class=\"line\">                break outer;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">i的值为:0 j的值为:0</span><br><span class=\"line\">i的值为:0 j的值为:1</span><br><span class=\"line\">//但是如果使用break inner则只能跳出内层循环，外层循环仍然执行，具体输出如下</span><br><span class=\"line\">i的值为:0 j的值为:0</span><br><span class=\"line\">i的值为:0 j的值为:1</span><br><span class=\"line\">i的值为:1 j的值为:0</span><br><span class=\"line\">i的值为:1 j的值为:1</span><br><span class=\"line\">i的值为:2 j的值为:0</span><br><span class=\"line\">i的值为:2 j的值为:1</span><br><span class=\"line\">i的值为:3 j的值为:0</span><br><span class=\"line\">i的值为:3 j的值为:1</span><br><span class=\"line\">i的值为:4 j的值为:0</span><br><span class=\"line\">i的值为:4 j的值为:1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"46-int-和-Integer-有哪些区别？\"><a href=\"#46-int-和-Integer-有哪些区别？\" class=\"headerlink\" title=\"46. int 和 Integer 有哪些区别？\"></a>46. int 和 Integer 有哪些区别？</h4><p>（1）int和Integer的区别<br>Integer是int的包装类；int是基本数据类型,长度为32位（4）字节。<br>Integer是Java提供的封装类，在java.lang.Integer包里面。<br>Integer变量必须实例化后才能使用；int变量不需要。<br>Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值。<br>Integer的默认值是null；int的默认值是0</p>\n<p>（2）关于Integer和int的深入比较<br>由于Integer变量实际上是对一个Integer对象的引用，所以两个通过new生成的Integer变量永远是不相等的（因为new生成的是两个对象，其内存地址不同）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i = new Integer(100);</span><br><span class=\"line\">integer j = new Integer(100);</span><br><span class=\"line\">System.out.println(i==j);</span><br><span class=\"line\">//输出</span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure>\n<p>Integer变量和int变量比较时，只要两个变量的值是向等的，则结果为true（因为包装类Integer和基本数据类型int比较时，Java会自动拆包装为int，然后进行比较，实际上就变为两个int变量的比较）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i = new Integer(100);</span><br><span class=\"line\">int j = 100;</span><br><span class=\"line\">System.out.ptintln(i == j);</span><br><span class=\"line\">//输出</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n<p>非new生成的Integer变量和new Integer()生成的变量比较时，结果为false。（因为 ①当变量值在-128~127之间时，非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i = new Integer(100);</span><br><span class=\"line\">Integer j = 100;</span><br><span class=\"line\">System.out.print(i == j);</span><br><span class=\"line\">//输出</span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure>\n<p>对于两个非new生成的Integer对象，进行比较时，如果两个变量的值在区间-128到127之间，则比较结果为true，如果两个变量的值不在此区间，则比较结果为false。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i = 100;</span><br><span class=\"line\">Integer j = 100;</span><br><span class=\"line\">System.out.print(i == j); </span><br><span class=\"line\">//输出</span><br><span class=\"line\">true</span><br><span class=\"line\">Integer i = 128;</span><br><span class=\"line\">Integer j = 128;</span><br><span class=\"line\">System.out.print(i == j); </span><br><span class=\"line\">//输出</span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure>\n<p>对于上面输出结果的原因：<br>java在编译Integer i &#x3D;100 ;时，会翻译成为Integer i &#x3D; Integer.valueOf(100);而java API中对Integer类型的valueOf的定义如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Integer valueOf(int i)&#123;</span><br><span class=\"line\">    assert IntegerCache.high &gt;= 127;</span><br><span class=\"line\">    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)&#123;</span><br><span class=\"line\">        return IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return new Integer(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面我们可以知道给 Interger 赋予的 int 数值在 - 128 - 127 的时候，直接从 cache 中获取，这些 cache 引用对 Integer 对象地址是不变的，但是不在这个范围内的数字，则 new Integer (i) 这个地址是新的地址，不可能一样的.</p>\n<h4 id=\"47-有了-int-为什么还要有-Integer-？\"><a href=\"#47-有了-int-为什么还要有-Integer-？\" class=\"headerlink\" title=\"47. 有了 int 为什么还要有 Integer ？\"></a>47. 有了 int 为什么还要有 Integer ？</h4><p>（1）因为Java语言是面向对象的，对象封装可以把属性（数据跟处理这些数据的方法）结合在一起。比如Integer就有parseInt()等方法来专门处理int型相关的数据。<br>（2）在Java中绝大部分方法或类都是用来处理类类型对象的，如ArrayList和LinkedList集合类就只能以类作为它的存储对象，而这时如果想把一个int型的数据存入list是不可能的，必须把它包装成类，也就是Integer才能被List所接受。</p>\n<h4 id=\"48-Integer-的装箱和拆箱\"><a href=\"#48-Integer-的装箱和拆箱\" class=\"headerlink\" title=\"48. Integer 的装箱和拆箱\"></a>48. Integer 的装箱和拆箱</h4><p>（1）自动装箱，将基本数据类型转化为对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//等价于Integer num = Integer.valueOf(100);</span><br><span class=\"line\">Integer i=100;</span><br></pre></td></tr></table></figure>\n<p>（2）自动拆箱，将对象转化为基本数据类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//声明一个Integer对象</span><br><span class=\"line\">Integer i = 100;</span><br><span class=\"line\">//进行计算时自动拆箱</span><br><span class=\"line\">i++;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"49-String是否是基本数据类型？\"><a href=\"#49-String是否是基本数据类型？\" class=\"headerlink\" title=\"49. String是否是基本数据类型？\"></a>49. String是否是基本数据类型？</h4><p>（1）首先说不是基本类型。<br>（2）JAVA一共有八种基本数据类型：byte，short，char，int，long，double，float，boolean</p>\n<h4 id=\"50-String-aaaStr-x3D-”aaa”-与-String-aaaStr-x3D-new-String-“aaa”-相同么？\"><a href=\"#50-String-aaaStr-x3D-”aaa”-与-String-aaaStr-x3D-new-String-“aaa”-相同么？\" class=\"headerlink\" title=\"50. String aaaStr&#x3D;”aaa” 与 String aaaStr &#x3D; new String(“aaa”) 相同么？\"></a>50. String aaaStr&#x3D;”aaa” 与 String aaaStr &#x3D; new String(“aaa”) 相同么？</h4><p>（1）String aaaStr &#x3D; “aaa” 会将字符串aaa分配到常量池中，如果常量池中没有该字符串，则会在常量池中创建一个字符串aaa，然后把地址赋给变量aaaStr；如果存在字符串aaa，则直接将常量池中字符串aaa的地址赋给aaaStr<br>（2）String aaaStr &#x3D; new String(“aaa”) 会在堆内存中创建一个String对象，并将对象的地址赋给aaaStr，后期如果仍然有String bbbStr &#x3D; new String(“aaa”) 及时字符串都是aaa，但是仍然是新创建一个String对象，是分别的两个对象</p>\n<h4 id=\"51-什么是反射？\"><a href=\"#51-什么是反射？\" class=\"headerlink\" title=\"51. 什么是反射？\"></a>51. 什么是反射？</h4><p>（1）Java中反射是动态获取信息以及动态调用对象方法的一种反射机制。<br>（2）Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。而这也是Java被视为动态语言的一个关键性质。<br>（3）Java反射的功能是在运行时判断任意一个对象所属的类，在运行时构造任意一个类的对象，在运行时判断任意一个类所具有的成员变量和方法，在运行时调用任意一个对象的方法，生成动态代理。<br>（4）Java反射的实现方式<br>第一种，使用 Class.forName 静态方法。当你知道该类的全路径名时，你可以使用该方法获取 Class 类对象。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clz = Class.forName(&quot;com.aaa.Apple&quot;);</span><br><span class=\"line\">Apple apple = (Apple)clz.newInstance();</span><br></pre></td></tr></table></figure>\n<p>第二种，使用 .class 方法。这种方法只适合在编译前就知道操作的 Class。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clz = Apple.class;</span><br><span class=\"line\">Constructor constructor = clz.getConstructor();</span><br><span class=\"line\">Apple apple = (Apple)constructor.newInstance();</span><br></pre></td></tr></table></figure>\n<p>第三种，使用类对象的 getClass() 方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = new String(&quot;Hello&quot;);</span><br><span class=\"line\">Class clz = str.getClass();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"52-Java-中为什么不允许从静态方法中访问非静态变量？\"><a href=\"#52-Java-中为什么不允许从静态方法中访问非静态变量？\" class=\"headerlink\" title=\"52. Java 中为什么不允许从静态方法中访问非静态变量？\"></a>52. Java 中为什么不允许从静态方法中访问非静态变量？</h4><p>（1）静态变量属于类本身，在类加载的时候就会分配内存，可以通过类名直接访问<br>（2）非静态变量属于类的对象，只有在类的对象产生时，才会分配内存，通过类的实例去访问<br>（3）静态方法也属于类本身，但是此时没有类的实例，内存中没有非静态变量，所以无法调用<br>（4）说白了就是静态方法读取非静态变量，很可能不知道当时值是什么，不确定，没有实例化，静态方法也找不到它</p>\n<h4 id=\"53-float-和-double-的区别是什么？\"><a href=\"#53-float-和-double-的区别是什么？\" class=\"headerlink\" title=\"53. float 和 double 的区别是什么？\"></a>53. float 和 double 的区别是什么？</h4><p>（1）内存中占有的字节数不同，单精度浮点数float在内存中占有4个字节，双精度浮点数double在内存中占有8个字节<br>（2）有效数字位数不同，单精度浮点数有效数字8位，双精度浮点数有效数字16位；<br>（3）数值取值范围不同，单精度浮点数的表示范围：-3.40E+38<del>3.40E+38，双精度浮点数的表示范围：-1.79E+308</del>-1.79E+308<br>（4）在程序中处理速度不同 一般来说，CPU处理单精度浮点数的速度比双精度浮点数的速度快；如果不声明，默认小数是double类型，如果想用float，要进行强转。<br>举例float f&#x3D;1.3；会编译报错，正确的写法是float f &#x3D; (float)1.3，或者float a &#x3D; 1.3f，或者float a &#x3D; 1.3f<br>注意 float是八位有效数字，第七位会四舍五入。</p>\n<h4 id=\"54-Java-中-6-0-1-x3D-x3D-0-6-是否为true？\"><a href=\"#54-Java-中-6-0-1-x3D-x3D-0-6-是否为true？\" class=\"headerlink\" title=\"54. Java 中 6*0.1 &#x3D;&#x3D; 0.6 是否为true？\"></a>54. Java 中 6*0.1 &#x3D;&#x3D; 0.6 是否为true？</h4><p>返回false，因为浮点数不能完全精确的表示，一般会损失一定的精度。下面例子可以看出来6<em>0.1得到结果是0.6000000000000001，但是5</em>0.1却没有问题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    System.out.println(6*0.1 == 0.6);</span><br><span class=\"line\">    System.out.println(6*0.1);</span><br><span class=\"line\">    System.out.println(0.6);</span><br><span class=\"line\">    System.out.println(5*0.1 == 0.5);</span><br><span class=\"line\">    System.out.println(5*0.1);</span><br><span class=\"line\">    System.out.println(0.5);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">false</span><br><span class=\"line\">0.6000000000000001</span><br><span class=\"line\">0.6</span><br><span class=\"line\">true</span><br><span class=\"line\">0.5</span><br><span class=\"line\">0.5</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"55-实例化创建对象有几种方式？\"><a href=\"#55-实例化创建对象有几种方式？\" class=\"headerlink\" title=\"55. 实例化创建对象有几种方式？\"></a>55. 实例化创建对象有几种方式？</h4><p>（1）通过 new 对象的方式创建<br><code>TestBean a = new TestBean();</code><br>（2）通过 clone() 方法创建<br><code>TestBean b = a.clone();</code><br>（3）通过反射机制创建，第51题已经写出了反射的创建例子代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clz = Class.forName(&quot;com.aaa.Apple&quot;);</span><br><span class=\"line\">Apple apple = (Apple)clz.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">Class clz = Apple.class;</span><br><span class=\"line\">Constructor constructor = clz.getConstructor();</span><br><span class=\"line\">Apple apple = (Apple)constructor.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">String str = new String(&quot;Hello&quot;);</span><br><span class=\"line\">Class clz = str.getClass();</span><br></pre></td></tr></table></figure>\n<p>（4）序列化反序列化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    ObjectInputStream in = ObjectInputStream(new FilelnputStream(&quot;/data.txt&quot;));</span><br><span class=\"line\">    TestBean a = (TestBean) in.readObject();</span><br><span class=\"line\">    System.out.println(&quot;反序列化a：&quot; + a);</span><br><span class=\"line\">    in.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"56-NotEmpty-NotNull和-NotBlank的区别\"><a href=\"#56-NotEmpty-NotNull和-NotBlank的区别\" class=\"headerlink\" title=\"56. @NotEmpty,@NotNull和@NotBlank的区别\"></a>56. @NotEmpty,@NotNull和@NotBlank的区别</h4><p>（1）@NotEmpty，不能为null，且Size&gt;0<br>（2）@NotNull，不能为null，但可以为empty,没有Size的约束<br>（3）@NotBlank，只用于String,不能为null且trim()之后size&gt;0</p>\n<h4 id=\"57-try-里有一个return语句，那么紧跟在这个try后的finally-里的code会不会被执行，什么时候被执行，在return前还是后\"><a href=\"#57-try-里有一个return语句，那么紧跟在这个try后的finally-里的code会不会被执行，什么时候被执行，在return前还是后\" class=\"headerlink\" title=\"57. try {}里有一个return语句，那么紧跟在这个try后的finally{}里的code会不会被执行，什么时候被执行，在return前还是后?\"></a>57. try {}里有一个return语句，那么紧跟在这个try后的finally{}里的code会不会被执行，什么时候被执行，在return前还是后?</h4><p>（1）finally{}中的语句是一定会执行的，那么这个可能正常脱口而出就是return之前，return之后可能就出了这个方法了，鬼知道跑哪里去了，但更准确的应该是在return中间执行，请看下面程序代码的运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestMain &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        TestMain test = new TestMain();</span><br><span class=\"line\">        System.out.println(test.test());</span><br><span class=\"line\">        ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int test() &#123;</span><br><span class=\"line\">        int x = 1;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(&quot;try method&quot;);</span><br><span class=\"line\">            return x;</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            System.out.println(&quot;finally&quot;);</span><br><span class=\"line\">            ++x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">try method</span><br><span class=\"line\">finally</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<p>（2）运行结果分别按照顺序输出，try内部日志，finally内部日志，最终返回结果1<br>（3）为什么呢？主函数调用子函数并得到结果的过程，好比主函数准备一个空罐子，当子函数要返回结果时，先把结果放在罐子里，然后再将程序逻辑返回到主函数。所谓返回，就是子函数说，我不运行了，你主函数继续运行吧，这没什么结果可言，结果是在说这话之前放进罐子里的。</p>\n<h4 id=\"58-能将-int-强制转换为-byte-类型的变量吗？如果该值大于-byte-类型的范围，将会出现什么现象？\"><a href=\"#58-能将-int-强制转换为-byte-类型的变量吗？如果该值大于-byte-类型的范围，将会出现什么现象？\" class=\"headerlink\" title=\"58. 能将 int 强制转换为 byte 类型的变量吗？如果该值大于 byte 类型的范围，将会出现什么现象？\"></a>58. 能将 int 强制转换为 byte 类型的变量吗？如果该值大于 byte 类型的范围，将会出现什么现象？</h4><p>可以做强制转换，但是 Java 中 int 是 32 位的，而 byte 是 8 位的，但是，如果强制转化，int 类型的高 24 位将会被丢弃，因为byte 类型的范围是从 -128 到 128。</p>\n<h4 id=\"59-字节流与字符流的区别\"><a href=\"#59-字节流与字符流的区别\" class=\"headerlink\" title=\"59. 字节流与字符流的区别\"></a>59. 字节流与字符流的区别</h4><p>（1）要把一段二进制数据数据逐一输出到某个设备中，或者从某个设备中逐一读取一段二进制数据，不管输入输出设备是什么，我们要用统一的方式来完成这些操作，用一种抽象的方式进行描述，这个抽象描述方式起名为IO流，对应的抽象类为OutputStream和InputStream，不同的实现类就代表不同的输入和输出设备，它们都是针对字节进行操作的。<br>（2）计算机中的一切最终都是二进制的字节形式存在。对于经常用到的中文字符，首先要得到其对应的字节，然后将字节写入到输出流。读取时，首先读到的是字节，可是我们要把它显示为字符，我们需要将字节转换成字符。由于这样的需求很广泛，Java专门提供了字符流包装类。<br>（3）底层设备永远只接受字节数据，有时候要写字符串到底层设备，需要将字符串转成字节再进行写入。字符流是字节流的包装，字符流则是直接接受字符串，它内部将串转成字节，再写入底层设备，这为我们向IO设备写入或读取字符串提供了一点点方便。<br>（4）字符向字节转换时，要注意编码的问题，因为字符串转成字节数组，其实是转成该字符的某种编码的字节形式，读取也是反之的道理。</p>\n<h4 id=\"60-什么是java序列化，如何实现java序列化？或者请解释Serializable接口的作用。\"><a href=\"#60-什么是java序列化，如何实现java序列化？或者请解释Serializable接口的作用。\" class=\"headerlink\" title=\"60. 什么是java序列化，如何实现java序列化？或者请解释Serializable接口的作用。\"></a>60. 什么是java序列化，如何实现java序列化？或者请解释Serializable接口的作用。</h4><p>（1）将一个java对象变成字节流的形式传出去或者从一个字节流中恢复成一个java对象，例如，要将java对象存储到硬盘或者传送给网络上的其他计算机，这个过程我们可以自己写代码去把一个java对象变成某个格式的字节流再传输。<br>（2）jre本身就提供了这种支持，我们可以调用OutputStream的writeObject方法来做，如果要让java帮我们做，要被传输的对象必须实现serializable接口，这样，javac编译时就会进行特殊处理，编译的类才可以被writeObject方法操作，这就是所谓的序列化。需要被序列化的类必须实现Serializable接口，该接口是一个mini接口，其中没有需要实现方法，implements Serializable只是为了标注该对象是可被序列化的。<br>（3）在web开发中，如果对象被保存在了Session中，tomcat在重启时要把Session对象序列化到硬盘，这个对象就必须实现Serializable接口。如果对象要经过分布式系统进行网络传输，被传输的对象就必须实现Serializable接口。</p>\n<h4 id=\"61-switch语句能否作用在byte上，能否作用在long上，能否作用在String上\"><a href=\"#61-switch语句能否作用在byte上，能否作用在long上，能否作用在String上\" class=\"headerlink\" title=\"61. switch语句能否作用在byte上，能否作用在long上，能否作用在String上?\"></a>61. switch语句能否作用在byte上，能否作用在long上，能否作用在String上?</h4><p>（1）在switch（e）中，e只能是一个整数表达式或者枚举常量，整数表达式可以是int基本类型或Integer包装类型，由于byte,short,char都可以隐含转换为int，所以，这些类型以及这些类型的包装类型也是可以的。<br>（2）jdk1.7之后加入String，通过hashCode转化为int，所以可以适用于switch语句中。<br>（3）long类型都不符合switch的语法规定，并且不能被隐式转换成int类型，所以，它们不能作用于swtich语句中。</p>\n<h4 id=\"62-使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？\"><a href=\"#62-使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？\" class=\"headerlink\" title=\"62. 使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？\"></a>62. 使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？</h4><p>（1）使用final关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的。例如，对于如下语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finalStringBuffer a=new StringBuffer(&quot;immutable&quot;);</span><br><span class=\"line\">//执行如下语句将报告编译期错误：</span><br><span class=\"line\">a=new StringBuffer(&quot;&quot;);</span><br><span class=\"line\">//但是，执行如下语句则可以通过编译：</span><br><span class=\"line\">a.append(&quot; broken!&quot;);</span><br></pre></td></tr></table></figure>\n<p>（2）有人在定义方法的参数时，可能想采用如下形式来阻止方法内部修改传进来的参数对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void method(final StringBuffer param)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）在该方法内部仍然可以增加如下代码来修改参数对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">param.append(&quot;a&quot;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"63-是否可以从一个static方法内部发出对非static方法的调用？\"><a href=\"#63-是否可以从一个static方法内部发出对非static方法的调用？\" class=\"headerlink\" title=\"63. 是否可以从一个static方法内部发出对非static方法的调用？\"></a>63. 是否可以从一个static方法内部发出对非static方法的调用？</h4><p>可以，可以通过在内部对非static方法的类实例化后，在调用即可，代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">            TestController.ttt();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void ttt() &#123;</span><br><span class=\"line\">        TestController a = new TestController();</span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        a.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void test()&#123;</span><br><span class=\"line\">        System.out.println(&quot;1111&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">com.buxuesong.account.api.controller.TestController@2530c12</span><br><span class=\"line\">1111</span><br><span class=\"line\">com.buxuesong.account.api.controller.TestController@73c6c3b2</span><br><span class=\"line\">1111</span><br><span class=\"line\">com.buxuesong.account.api.controller.TestController@48533e64</span><br><span class=\"line\">1111</span><br><span class=\"line\">com.buxuesong.account.api.controller.TestController@64a294a6</span><br><span class=\"line\">1111</span><br><span class=\"line\">com.buxuesong.account.api.controller.TestController@7e0b37bc</span><br><span class=\"line\">1111</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"clgkfpskm0000xowdb9olcx90","category_id":"cljp3kktn000084wd2d2te5ou","_id":"cljp3kktq000384wd6kiwdlev"}],"PostTag":[{"post_id":"clgkfpskm0000xowdb9olcx90","tag_id":"cljp3kkto000184wd9h3l1q5g","_id":"cljp3kktr000484wd2fgd4fkk"},{"post_id":"clgkfpskm0000xowdb9olcx90","tag_id":"cljp3kktp000284wd5wt993ix","_id":"cljp3kktr000584wd9teeeudv"}],"Tag":[{"name":"后端","_id":"cljp3kkto000184wd9h3l1q5g"},{"name":"面试题","_id":"cljp3kktp000284wd5wt993ix"}]}}